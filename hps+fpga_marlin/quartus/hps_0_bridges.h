#ifndef _ALTERA_HPS_0_BRIDGES_H_
#define _ALTERA_HPS_0_BRIDGES_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file 'soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0_bridges' and devices
 * connected to the following masters:
 *   axi_f2h
 *   h2f
 *   h2f_lw
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'hps_0_axi_sdram', class 'axi_sdram'
 * The macros are prefixed with 'HPS_0_AXI_SDRAM_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_AXI_SDRAM_COMPONENT_TYPE axi_sdram
#define HPS_0_AXI_SDRAM_COMPONENT_NAME hps_0_axi_sdram
#define HPS_0_AXI_SDRAM_BASE 0x0
#define HPS_0_AXI_SDRAM_SPAN 0x80000000
#define HPS_0_AXI_SDRAM_END 0x7fffffff
#define HPS_0_AXI_SDRAM_SIZE_MULTIPLE 1
#define HPS_0_AXI_SDRAM_SIZE_VALUE 1<<31
#define HPS_0_AXI_SDRAM_WRITABLE 1
#define HPS_0_AXI_SDRAM_MEMORY_INFO_GENERATE_DAT_SYM 0
#define HPS_0_AXI_SDRAM_MEMORY_INFO_GENERATE_HEX 0
#define HPS_0_AXI_SDRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 31

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 4294906626
#define SYSID_QSYS_TIMESTAMP 1553717928

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x3000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x300f
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3020
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x302f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x3040
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x304f
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'flags_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'FLAGS_IN_'.
 * The prefix is the slave descriptor.
 */
#define FLAGS_IN_COMPONENT_TYPE altera_avalon_pio
#define FLAGS_IN_COMPONENT_NAME flags_in
#define FLAGS_IN_BASE 0x4000
#define FLAGS_IN_SPAN 16
#define FLAGS_IN_END 0x400f
#define FLAGS_IN_BIT_CLEARING_EDGE_REGISTER 0
#define FLAGS_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FLAGS_IN_CAPTURE 0
#define FLAGS_IN_DATA_WIDTH 32
#define FLAGS_IN_DO_TEST_BENCH_WIRING 0
#define FLAGS_IN_DRIVEN_SIM_VALUE 0
#define FLAGS_IN_EDGE_TYPE NONE
#define FLAGS_IN_FREQ 50000000
#define FLAGS_IN_HAS_IN 1
#define FLAGS_IN_HAS_OUT 0
#define FLAGS_IN_HAS_TRI 0
#define FLAGS_IN_IRQ_TYPE NONE
#define FLAGS_IN_RESET_VALUE 0

/*
 * Macros for device 'flags_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'FLAGS_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FLAGS_OUT_COMPONENT_TYPE altera_avalon_pio
#define FLAGS_OUT_COMPONENT_NAME flags_out
#define FLAGS_OUT_BASE 0x4020
#define FLAGS_OUT_SPAN 16
#define FLAGS_OUT_END 0x402f
#define FLAGS_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define FLAGS_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FLAGS_OUT_CAPTURE 0
#define FLAGS_OUT_DATA_WIDTH 32
#define FLAGS_OUT_DO_TEST_BENCH_WIRING 0
#define FLAGS_OUT_DRIVEN_SIM_VALUE 0
#define FLAGS_OUT_EDGE_TYPE NONE
#define FLAGS_OUT_FREQ 50000000
#define FLAGS_OUT_HAS_IN 0
#define FLAGS_OUT_HAS_OUT 1
#define FLAGS_OUT_HAS_TRI 0
#define FLAGS_OUT_IRQ_TYPE NONE
#define FLAGS_OUT_RESET_VALUE 0

/*
 * Macros for device 'configuration_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'CONFIGURATION_1_'.
 * The prefix is the slave descriptor.
 */
#define CONFIGURATION_1_COMPONENT_TYPE altera_avalon_pio
#define CONFIGURATION_1_COMPONENT_NAME configuration_1
#define CONFIGURATION_1_BASE 0x4040
#define CONFIGURATION_1_SPAN 16
#define CONFIGURATION_1_END 0x404f
#define CONFIGURATION_1_BIT_CLEARING_EDGE_REGISTER 0
#define CONFIGURATION_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CONFIGURATION_1_CAPTURE 0
#define CONFIGURATION_1_DATA_WIDTH 32
#define CONFIGURATION_1_DO_TEST_BENCH_WIRING 0
#define CONFIGURATION_1_DRIVEN_SIM_VALUE 0
#define CONFIGURATION_1_EDGE_TYPE NONE
#define CONFIGURATION_1_FREQ 50000000
#define CONFIGURATION_1_HAS_IN 0
#define CONFIGURATION_1_HAS_OUT 1
#define CONFIGURATION_1_HAS_TRI 0
#define CONFIGURATION_1_IRQ_TYPE NONE
#define CONFIGURATION_1_RESET_VALUE 0

/*
 * Macros for device 'fans', class 'altera_avalon_pio'
 * The macros are prefixed with 'FANS_'.
 * The prefix is the slave descriptor.
 */
#define FANS_COMPONENT_TYPE altera_avalon_pio
#define FANS_COMPONENT_NAME fans
#define FANS_BASE 0x40a0
#define FANS_SPAN 16
#define FANS_END 0x40af
#define FANS_BIT_CLEARING_EDGE_REGISTER 0
#define FANS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FANS_CAPTURE 0
#define FANS_DATA_WIDTH 2
#define FANS_DO_TEST_BENCH_WIRING 0
#define FANS_DRIVEN_SIM_VALUE 0
#define FANS_EDGE_TYPE NONE
#define FANS_FREQ 50000000
#define FANS_HAS_IN 0
#define FANS_HAS_OUT 1
#define FANS_HAS_TRI 0
#define FANS_IRQ_TYPE NONE
#define FANS_RESET_VALUE 0

/*
 * Macros for device 'stepper_1_speed', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_1_SPEED_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_1_SPEED_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_1_SPEED_COMPONENT_NAME stepper_1_speed
#define STEPPER_1_SPEED_BASE 0x5000
#define STEPPER_1_SPEED_SPAN 16
#define STEPPER_1_SPEED_END 0x500f
#define STEPPER_1_SPEED_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_1_SPEED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_1_SPEED_CAPTURE 0
#define STEPPER_1_SPEED_DATA_WIDTH 32
#define STEPPER_1_SPEED_DO_TEST_BENCH_WIRING 0
#define STEPPER_1_SPEED_DRIVEN_SIM_VALUE 0
#define STEPPER_1_SPEED_EDGE_TYPE NONE
#define STEPPER_1_SPEED_FREQ 50000000
#define STEPPER_1_SPEED_HAS_IN 0
#define STEPPER_1_SPEED_HAS_OUT 1
#define STEPPER_1_SPEED_HAS_TRI 0
#define STEPPER_1_SPEED_IRQ_TYPE NONE
#define STEPPER_1_SPEED_RESET_VALUE 0

/*
 * Macros for device 'stepper_1_steps_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_1_STEPS_IN_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_1_STEPS_IN_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_1_STEPS_IN_COMPONENT_NAME stepper_1_steps_in
#define STEPPER_1_STEPS_IN_BASE 0x5020
#define STEPPER_1_STEPS_IN_SPAN 16
#define STEPPER_1_STEPS_IN_END 0x502f
#define STEPPER_1_STEPS_IN_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_1_STEPS_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_1_STEPS_IN_CAPTURE 0
#define STEPPER_1_STEPS_IN_DATA_WIDTH 32
#define STEPPER_1_STEPS_IN_DO_TEST_BENCH_WIRING 0
#define STEPPER_1_STEPS_IN_DRIVEN_SIM_VALUE 0
#define STEPPER_1_STEPS_IN_EDGE_TYPE NONE
#define STEPPER_1_STEPS_IN_FREQ 50000000
#define STEPPER_1_STEPS_IN_HAS_IN 1
#define STEPPER_1_STEPS_IN_HAS_OUT 0
#define STEPPER_1_STEPS_IN_HAS_TRI 0
#define STEPPER_1_STEPS_IN_IRQ_TYPE NONE
#define STEPPER_1_STEPS_IN_RESET_VALUE 0

/*
 * Macros for device 'stepper_2_speed', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_2_SPEED_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_2_SPEED_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_2_SPEED_COMPONENT_NAME stepper_2_speed
#define STEPPER_2_SPEED_BASE 0x5040
#define STEPPER_2_SPEED_SPAN 16
#define STEPPER_2_SPEED_END 0x504f
#define STEPPER_2_SPEED_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_2_SPEED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_2_SPEED_CAPTURE 0
#define STEPPER_2_SPEED_DATA_WIDTH 32
#define STEPPER_2_SPEED_DO_TEST_BENCH_WIRING 0
#define STEPPER_2_SPEED_DRIVEN_SIM_VALUE 0
#define STEPPER_2_SPEED_EDGE_TYPE NONE
#define STEPPER_2_SPEED_FREQ 50000000
#define STEPPER_2_SPEED_HAS_IN 0
#define STEPPER_2_SPEED_HAS_OUT 1
#define STEPPER_2_SPEED_HAS_TRI 0
#define STEPPER_2_SPEED_IRQ_TYPE NONE
#define STEPPER_2_SPEED_RESET_VALUE 0

/*
 * Macros for device 'stepper_2_steps_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_2_STEPS_IN_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_2_STEPS_IN_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_2_STEPS_IN_COMPONENT_NAME stepper_2_steps_in
#define STEPPER_2_STEPS_IN_BASE 0x5060
#define STEPPER_2_STEPS_IN_SPAN 16
#define STEPPER_2_STEPS_IN_END 0x506f
#define STEPPER_2_STEPS_IN_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_2_STEPS_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_2_STEPS_IN_CAPTURE 0
#define STEPPER_2_STEPS_IN_DATA_WIDTH 32
#define STEPPER_2_STEPS_IN_DO_TEST_BENCH_WIRING 0
#define STEPPER_2_STEPS_IN_DRIVEN_SIM_VALUE 0
#define STEPPER_2_STEPS_IN_EDGE_TYPE NONE
#define STEPPER_2_STEPS_IN_FREQ 50000000
#define STEPPER_2_STEPS_IN_HAS_IN 1
#define STEPPER_2_STEPS_IN_HAS_OUT 0
#define STEPPER_2_STEPS_IN_HAS_TRI 0
#define STEPPER_2_STEPS_IN_IRQ_TYPE NONE
#define STEPPER_2_STEPS_IN_RESET_VALUE 0

/*
 * Macros for device 'stepper_3_speed', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_3_SPEED_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_3_SPEED_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_3_SPEED_COMPONENT_NAME stepper_3_speed
#define STEPPER_3_SPEED_BASE 0x5080
#define STEPPER_3_SPEED_SPAN 16
#define STEPPER_3_SPEED_END 0x508f
#define STEPPER_3_SPEED_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_3_SPEED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_3_SPEED_CAPTURE 0
#define STEPPER_3_SPEED_DATA_WIDTH 32
#define STEPPER_3_SPEED_DO_TEST_BENCH_WIRING 0
#define STEPPER_3_SPEED_DRIVEN_SIM_VALUE 0
#define STEPPER_3_SPEED_EDGE_TYPE NONE
#define STEPPER_3_SPEED_FREQ 50000000
#define STEPPER_3_SPEED_HAS_IN 0
#define STEPPER_3_SPEED_HAS_OUT 1
#define STEPPER_3_SPEED_HAS_TRI 0
#define STEPPER_3_SPEED_IRQ_TYPE NONE
#define STEPPER_3_SPEED_RESET_VALUE 0

/*
 * Macros for device 'stepper_3_steps_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_3_STEPS_IN_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_3_STEPS_IN_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_3_STEPS_IN_COMPONENT_NAME stepper_3_steps_in
#define STEPPER_3_STEPS_IN_BASE 0x50a0
#define STEPPER_3_STEPS_IN_SPAN 16
#define STEPPER_3_STEPS_IN_END 0x50af
#define STEPPER_3_STEPS_IN_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_3_STEPS_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_3_STEPS_IN_CAPTURE 0
#define STEPPER_3_STEPS_IN_DATA_WIDTH 32
#define STEPPER_3_STEPS_IN_DO_TEST_BENCH_WIRING 0
#define STEPPER_3_STEPS_IN_DRIVEN_SIM_VALUE 0
#define STEPPER_3_STEPS_IN_EDGE_TYPE NONE
#define STEPPER_3_STEPS_IN_FREQ 50000000
#define STEPPER_3_STEPS_IN_HAS_IN 1
#define STEPPER_3_STEPS_IN_HAS_OUT 0
#define STEPPER_3_STEPS_IN_HAS_TRI 0
#define STEPPER_3_STEPS_IN_IRQ_TYPE NONE
#define STEPPER_3_STEPS_IN_RESET_VALUE 0

/*
 * Macros for device 'stepper_4_speed', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_4_SPEED_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_4_SPEED_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_4_SPEED_COMPONENT_NAME stepper_4_speed
#define STEPPER_4_SPEED_BASE 0x50c0
#define STEPPER_4_SPEED_SPAN 16
#define STEPPER_4_SPEED_END 0x50cf
#define STEPPER_4_SPEED_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_4_SPEED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_4_SPEED_CAPTURE 0
#define STEPPER_4_SPEED_DATA_WIDTH 32
#define STEPPER_4_SPEED_DO_TEST_BENCH_WIRING 0
#define STEPPER_4_SPEED_DRIVEN_SIM_VALUE 0
#define STEPPER_4_SPEED_EDGE_TYPE NONE
#define STEPPER_4_SPEED_FREQ 50000000
#define STEPPER_4_SPEED_HAS_IN 0
#define STEPPER_4_SPEED_HAS_OUT 1
#define STEPPER_4_SPEED_HAS_TRI 0
#define STEPPER_4_SPEED_IRQ_TYPE NONE
#define STEPPER_4_SPEED_RESET_VALUE 0

/*
 * Macros for device 'stepper_4_steps_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_4_STEPS_IN_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_4_STEPS_IN_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_4_STEPS_IN_COMPONENT_NAME stepper_4_steps_in
#define STEPPER_4_STEPS_IN_BASE 0x50e0
#define STEPPER_4_STEPS_IN_SPAN 16
#define STEPPER_4_STEPS_IN_END 0x50ef
#define STEPPER_4_STEPS_IN_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_4_STEPS_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_4_STEPS_IN_CAPTURE 0
#define STEPPER_4_STEPS_IN_DATA_WIDTH 32
#define STEPPER_4_STEPS_IN_DO_TEST_BENCH_WIRING 0
#define STEPPER_4_STEPS_IN_DRIVEN_SIM_VALUE 0
#define STEPPER_4_STEPS_IN_EDGE_TYPE NONE
#define STEPPER_4_STEPS_IN_FREQ 50000000
#define STEPPER_4_STEPS_IN_HAS_IN 1
#define STEPPER_4_STEPS_IN_HAS_OUT 0
#define STEPPER_4_STEPS_IN_HAS_TRI 0
#define STEPPER_4_STEPS_IN_IRQ_TYPE NONE
#define STEPPER_4_STEPS_IN_RESET_VALUE 0

/*
 * Macros for device 'stepper_1_steps_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_1_STEPS_OUT_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_1_STEPS_OUT_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_1_STEPS_OUT_COMPONENT_NAME stepper_1_steps_out
#define STEPPER_1_STEPS_OUT_BASE 0x5100
#define STEPPER_1_STEPS_OUT_SPAN 16
#define STEPPER_1_STEPS_OUT_END 0x510f
#define STEPPER_1_STEPS_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_1_STEPS_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_1_STEPS_OUT_CAPTURE 0
#define STEPPER_1_STEPS_OUT_DATA_WIDTH 32
#define STEPPER_1_STEPS_OUT_DO_TEST_BENCH_WIRING 0
#define STEPPER_1_STEPS_OUT_DRIVEN_SIM_VALUE 0
#define STEPPER_1_STEPS_OUT_EDGE_TYPE NONE
#define STEPPER_1_STEPS_OUT_FREQ 50000000
#define STEPPER_1_STEPS_OUT_HAS_IN 0
#define STEPPER_1_STEPS_OUT_HAS_OUT 1
#define STEPPER_1_STEPS_OUT_HAS_TRI 0
#define STEPPER_1_STEPS_OUT_IRQ_TYPE NONE
#define STEPPER_1_STEPS_OUT_RESET_VALUE 0

/*
 * Macros for device 'stepper_2_steps_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_2_STEPS_OUT_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_2_STEPS_OUT_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_2_STEPS_OUT_COMPONENT_NAME stepper_2_steps_out
#define STEPPER_2_STEPS_OUT_BASE 0x5120
#define STEPPER_2_STEPS_OUT_SPAN 16
#define STEPPER_2_STEPS_OUT_END 0x512f
#define STEPPER_2_STEPS_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_2_STEPS_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_2_STEPS_OUT_CAPTURE 0
#define STEPPER_2_STEPS_OUT_DATA_WIDTH 32
#define STEPPER_2_STEPS_OUT_DO_TEST_BENCH_WIRING 0
#define STEPPER_2_STEPS_OUT_DRIVEN_SIM_VALUE 0
#define STEPPER_2_STEPS_OUT_EDGE_TYPE NONE
#define STEPPER_2_STEPS_OUT_FREQ 50000000
#define STEPPER_2_STEPS_OUT_HAS_IN 0
#define STEPPER_2_STEPS_OUT_HAS_OUT 1
#define STEPPER_2_STEPS_OUT_HAS_TRI 0
#define STEPPER_2_STEPS_OUT_IRQ_TYPE NONE
#define STEPPER_2_STEPS_OUT_RESET_VALUE 0

/*
 * Macros for device 'stepper_3_steps_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_3_STEPS_OUT_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_3_STEPS_OUT_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_3_STEPS_OUT_COMPONENT_NAME stepper_3_steps_out
#define STEPPER_3_STEPS_OUT_BASE 0x5140
#define STEPPER_3_STEPS_OUT_SPAN 16
#define STEPPER_3_STEPS_OUT_END 0x514f
#define STEPPER_3_STEPS_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_3_STEPS_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_3_STEPS_OUT_CAPTURE 0
#define STEPPER_3_STEPS_OUT_DATA_WIDTH 32
#define STEPPER_3_STEPS_OUT_DO_TEST_BENCH_WIRING 0
#define STEPPER_3_STEPS_OUT_DRIVEN_SIM_VALUE 0
#define STEPPER_3_STEPS_OUT_EDGE_TYPE NONE
#define STEPPER_3_STEPS_OUT_FREQ 50000000
#define STEPPER_3_STEPS_OUT_HAS_IN 0
#define STEPPER_3_STEPS_OUT_HAS_OUT 1
#define STEPPER_3_STEPS_OUT_HAS_TRI 0
#define STEPPER_3_STEPS_OUT_IRQ_TYPE NONE
#define STEPPER_3_STEPS_OUT_RESET_VALUE 0

/*
 * Macros for device 'stepper_4_steps_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPPER_4_STEPS_OUT_'.
 * The prefix is the slave descriptor.
 */
#define STEPPER_4_STEPS_OUT_COMPONENT_TYPE altera_avalon_pio
#define STEPPER_4_STEPS_OUT_COMPONENT_NAME stepper_4_steps_out
#define STEPPER_4_STEPS_OUT_BASE 0x5160
#define STEPPER_4_STEPS_OUT_SPAN 16
#define STEPPER_4_STEPS_OUT_END 0x516f
#define STEPPER_4_STEPS_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define STEPPER_4_STEPS_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPPER_4_STEPS_OUT_CAPTURE 0
#define STEPPER_4_STEPS_OUT_DATA_WIDTH 32
#define STEPPER_4_STEPS_OUT_DO_TEST_BENCH_WIRING 0
#define STEPPER_4_STEPS_OUT_DRIVEN_SIM_VALUE 0
#define STEPPER_4_STEPS_OUT_EDGE_TYPE NONE
#define STEPPER_4_STEPS_OUT_FREQ 50000000
#define STEPPER_4_STEPS_OUT_HAS_IN 0
#define STEPPER_4_STEPS_OUT_HAS_OUT 1
#define STEPPER_4_STEPS_OUT_HAS_TRI 0
#define STEPPER_4_STEPS_OUT_IRQ_TYPE NONE
#define STEPPER_4_STEPS_OUT_RESET_VALUE 0

/*
 * Macros for device 'endstops', class 'altera_avalon_pio'
 * The macros are prefixed with 'ENDSTOPS_'.
 * The prefix is the slave descriptor.
 */
#define ENDSTOPS_COMPONENT_TYPE altera_avalon_pio
#define ENDSTOPS_COMPONENT_NAME endstops
#define ENDSTOPS_BASE 0x5200
#define ENDSTOPS_SPAN 16
#define ENDSTOPS_END 0x520f
#define ENDSTOPS_BIT_CLEARING_EDGE_REGISTER 0
#define ENDSTOPS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ENDSTOPS_CAPTURE 0
#define ENDSTOPS_DATA_WIDTH 6
#define ENDSTOPS_DO_TEST_BENCH_WIRING 0
#define ENDSTOPS_DRIVEN_SIM_VALUE 0
#define ENDSTOPS_EDGE_TYPE NONE
#define ENDSTOPS_FREQ 50000000
#define ENDSTOPS_HAS_IN 1
#define ENDSTOPS_HAS_OUT 0
#define ENDSTOPS_HAS_TRI 0
#define ENDSTOPS_IRQ_TYPE NONE
#define ENDSTOPS_RESET_VALUE 0

/*
 * Macros for device 'temp_bed', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP_BED_'.
 * The prefix is the slave descriptor.
 */
#define TEMP_BED_COMPONENT_TYPE altera_avalon_pio
#define TEMP_BED_COMPONENT_NAME temp_bed
#define TEMP_BED_BASE 0x6000
#define TEMP_BED_SPAN 16
#define TEMP_BED_END 0x600f
#define TEMP_BED_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP_BED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP_BED_CAPTURE 0
#define TEMP_BED_DATA_WIDTH 12
#define TEMP_BED_DO_TEST_BENCH_WIRING 0
#define TEMP_BED_DRIVEN_SIM_VALUE 0
#define TEMP_BED_EDGE_TYPE NONE
#define TEMP_BED_FREQ 50000000
#define TEMP_BED_HAS_IN 1
#define TEMP_BED_HAS_OUT 0
#define TEMP_BED_HAS_TRI 0
#define TEMP_BED_IRQ_TYPE NONE
#define TEMP_BED_RESET_VALUE 0

/*
 * Macros for device 'temp0', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP0_'.
 * The prefix is the slave descriptor.
 */
#define TEMP0_COMPONENT_TYPE altera_avalon_pio
#define TEMP0_COMPONENT_NAME temp0
#define TEMP0_BASE 0x6020
#define TEMP0_SPAN 16
#define TEMP0_END 0x602f
#define TEMP0_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP0_CAPTURE 0
#define TEMP0_DATA_WIDTH 12
#define TEMP0_DO_TEST_BENCH_WIRING 0
#define TEMP0_DRIVEN_SIM_VALUE 0
#define TEMP0_EDGE_TYPE NONE
#define TEMP0_FREQ 50000000
#define TEMP0_HAS_IN 1
#define TEMP0_HAS_OUT 0
#define TEMP0_HAS_TRI 0
#define TEMP0_IRQ_TYPE NONE
#define TEMP0_RESET_VALUE 0

/*
 * Macros for device 'temp1', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP1_'.
 * The prefix is the slave descriptor.
 */
#define TEMP1_COMPONENT_TYPE altera_avalon_pio
#define TEMP1_COMPONENT_NAME temp1
#define TEMP1_BASE 0x6040
#define TEMP1_SPAN 16
#define TEMP1_END 0x604f
#define TEMP1_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP1_CAPTURE 0
#define TEMP1_DATA_WIDTH 12
#define TEMP1_DO_TEST_BENCH_WIRING 0
#define TEMP1_DRIVEN_SIM_VALUE 0
#define TEMP1_EDGE_TYPE NONE
#define TEMP1_FREQ 50000000
#define TEMP1_HAS_IN 1
#define TEMP1_HAS_OUT 0
#define TEMP1_HAS_TRI 0
#define TEMP1_IRQ_TYPE NONE
#define TEMP1_RESET_VALUE 0

/*
 * Macros for device 'temp_bed_bottom', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP_BED_BOTTOM_'.
 * The prefix is the slave descriptor.
 */
#define TEMP_BED_BOTTOM_COMPONENT_TYPE altera_avalon_pio
#define TEMP_BED_BOTTOM_COMPONENT_NAME temp_bed_bottom
#define TEMP_BED_BOTTOM_BASE 0x6060
#define TEMP_BED_BOTTOM_SPAN 16
#define TEMP_BED_BOTTOM_END 0x606f
#define TEMP_BED_BOTTOM_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP_BED_BOTTOM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP_BED_BOTTOM_CAPTURE 0
#define TEMP_BED_BOTTOM_DATA_WIDTH 12
#define TEMP_BED_BOTTOM_DO_TEST_BENCH_WIRING 0
#define TEMP_BED_BOTTOM_DRIVEN_SIM_VALUE 0
#define TEMP_BED_BOTTOM_EDGE_TYPE NONE
#define TEMP_BED_BOTTOM_FREQ 50000000
#define TEMP_BED_BOTTOM_HAS_IN 0
#define TEMP_BED_BOTTOM_HAS_OUT 1
#define TEMP_BED_BOTTOM_HAS_TRI 0
#define TEMP_BED_BOTTOM_IRQ_TYPE NONE
#define TEMP_BED_BOTTOM_RESET_VALUE 0

/*
 * Macros for device 'temp_bed_upper', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP_BED_UPPER_'.
 * The prefix is the slave descriptor.
 */
#define TEMP_BED_UPPER_COMPONENT_TYPE altera_avalon_pio
#define TEMP_BED_UPPER_COMPONENT_NAME temp_bed_upper
#define TEMP_BED_UPPER_BASE 0x6080
#define TEMP_BED_UPPER_SPAN 16
#define TEMP_BED_UPPER_END 0x608f
#define TEMP_BED_UPPER_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP_BED_UPPER_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP_BED_UPPER_CAPTURE 0
#define TEMP_BED_UPPER_DATA_WIDTH 12
#define TEMP_BED_UPPER_DO_TEST_BENCH_WIRING 0
#define TEMP_BED_UPPER_DRIVEN_SIM_VALUE 0
#define TEMP_BED_UPPER_EDGE_TYPE NONE
#define TEMP_BED_UPPER_FREQ 50000000
#define TEMP_BED_UPPER_HAS_IN 0
#define TEMP_BED_UPPER_HAS_OUT 1
#define TEMP_BED_UPPER_HAS_TRI 0
#define TEMP_BED_UPPER_IRQ_TYPE NONE
#define TEMP_BED_UPPER_RESET_VALUE 0

/*
 * Macros for device 'temp_e1_bottom', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP_E1_BOTTOM_'.
 * The prefix is the slave descriptor.
 */
#define TEMP_E1_BOTTOM_COMPONENT_TYPE altera_avalon_pio
#define TEMP_E1_BOTTOM_COMPONENT_NAME temp_e1_bottom
#define TEMP_E1_BOTTOM_BASE 0x60a0
#define TEMP_E1_BOTTOM_SPAN 16
#define TEMP_E1_BOTTOM_END 0x60af
#define TEMP_E1_BOTTOM_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP_E1_BOTTOM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP_E1_BOTTOM_CAPTURE 0
#define TEMP_E1_BOTTOM_DATA_WIDTH 12
#define TEMP_E1_BOTTOM_DO_TEST_BENCH_WIRING 0
#define TEMP_E1_BOTTOM_DRIVEN_SIM_VALUE 0
#define TEMP_E1_BOTTOM_EDGE_TYPE NONE
#define TEMP_E1_BOTTOM_FREQ 50000000
#define TEMP_E1_BOTTOM_HAS_IN 0
#define TEMP_E1_BOTTOM_HAS_OUT 1
#define TEMP_E1_BOTTOM_HAS_TRI 0
#define TEMP_E1_BOTTOM_IRQ_TYPE NONE
#define TEMP_E1_BOTTOM_RESET_VALUE 0

/*
 * Macros for device 'temp_e1_upper', class 'altera_avalon_pio'
 * The macros are prefixed with 'TEMP_E1_UPPER_'.
 * The prefix is the slave descriptor.
 */
#define TEMP_E1_UPPER_COMPONENT_TYPE altera_avalon_pio
#define TEMP_E1_UPPER_COMPONENT_NAME temp_e1_upper
#define TEMP_E1_UPPER_BASE 0x60c0
#define TEMP_E1_UPPER_SPAN 16
#define TEMP_E1_UPPER_END 0x60cf
#define TEMP_E1_UPPER_BIT_CLEARING_EDGE_REGISTER 0
#define TEMP_E1_UPPER_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TEMP_E1_UPPER_CAPTURE 0
#define TEMP_E1_UPPER_DATA_WIDTH 12
#define TEMP_E1_UPPER_DO_TEST_BENCH_WIRING 0
#define TEMP_E1_UPPER_DRIVEN_SIM_VALUE 0
#define TEMP_E1_UPPER_EDGE_TYPE NONE
#define TEMP_E1_UPPER_FREQ 50000000
#define TEMP_E1_UPPER_HAS_IN 0
#define TEMP_E1_UPPER_HAS_OUT 1
#define TEMP_E1_UPPER_HAS_TRI 0
#define TEMP_E1_UPPER_IRQ_TYPE NONE
#define TEMP_E1_UPPER_RESET_VALUE 0

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x30000
#define ILC_SPAN 256
#define ILC_END 0x300ff

/*
 * Macros for device 'hps_0_gmac0', class 'stmmac'
 * The macros are prefixed with 'HPS_0_GMAC0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GMAC0_COMPONENT_TYPE stmmac
#define HPS_0_GMAC0_COMPONENT_NAME hps_0_gmac0
#define HPS_0_GMAC0_BASE 0xff700000
#define HPS_0_GMAC0_SPAN 8192
#define HPS_0_GMAC0_END 0xff701fff

/*
 * Macros for device 'hps_0_gmac1', class 'stmmac'
 * The macros are prefixed with 'HPS_0_GMAC1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GMAC1_COMPONENT_TYPE stmmac
#define HPS_0_GMAC1_COMPONENT_NAME hps_0_gmac1
#define HPS_0_GMAC1_BASE 0xff702000
#define HPS_0_GMAC1_SPAN 8192
#define HPS_0_GMAC1_END 0xff703fff

/*
 * Macros for device 'hps_0_sdmmc', class 'sdmmc'
 * The macros are prefixed with 'HPS_0_SDMMC_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SDMMC_COMPONENT_TYPE sdmmc
#define HPS_0_SDMMC_COMPONENT_NAME hps_0_sdmmc
#define HPS_0_SDMMC_BASE 0xff704000
#define HPS_0_SDMMC_SPAN 4096
#define HPS_0_SDMMC_END 0xff704fff

/*
 * Macros for device 'hps_0_qspi', class 'cadence_qspi'
 * The macros are prefixed with 'HPS_0_QSPI_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_QSPI_COMPONENT_TYPE cadence_qspi
#define HPS_0_QSPI_COMPONENT_NAME hps_0_qspi
#define HPS_0_QSPI_BASE 0xff705000
#define HPS_0_QSPI_SPAN 256
#define HPS_0_QSPI_END 0xff7050ff

/*
 * Macros for device 'hps_0_fpgamgr', class 'altera_fpgamgr'
 * The macros are prefixed with 'HPS_0_FPGAMGR_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_FPGAMGR_COMPONENT_TYPE altera_fpgamgr
#define HPS_0_FPGAMGR_COMPONENT_NAME hps_0_fpgamgr
#define HPS_0_FPGAMGR_BASE 0xff706000
#define HPS_0_FPGAMGR_SPAN 4096
#define HPS_0_FPGAMGR_END 0xff706fff

/*
 * Macros for device 'hps_0_gpio0', class 'dw_gpio'
 * The macros are prefixed with 'HPS_0_GPIO0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GPIO0_COMPONENT_TYPE dw_gpio
#define HPS_0_GPIO0_COMPONENT_NAME hps_0_gpio0
#define HPS_0_GPIO0_BASE 0xff708000
#define HPS_0_GPIO0_SPAN 256
#define HPS_0_GPIO0_END 0xff7080ff

/*
 * Macros for device 'hps_0_gpio1', class 'dw_gpio'
 * The macros are prefixed with 'HPS_0_GPIO1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GPIO1_COMPONENT_TYPE dw_gpio
#define HPS_0_GPIO1_COMPONENT_NAME hps_0_gpio1
#define HPS_0_GPIO1_BASE 0xff709000
#define HPS_0_GPIO1_SPAN 256
#define HPS_0_GPIO1_END 0xff7090ff

/*
 * Macros for device 'hps_0_gpio2', class 'dw_gpio'
 * The macros are prefixed with 'HPS_0_GPIO2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_GPIO2_COMPONENT_TYPE dw_gpio
#define HPS_0_GPIO2_COMPONENT_NAME hps_0_gpio2
#define HPS_0_GPIO2_BASE 0xff70a000
#define HPS_0_GPIO2_SPAN 256
#define HPS_0_GPIO2_END 0xff70a0ff

/*
 * Macros for device 'hps_0_l3regs', class 'altera_l3regs'
 * The macros are prefixed with 'HPS_0_L3REGS_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_L3REGS_COMPONENT_TYPE altera_l3regs
#define HPS_0_L3REGS_COMPONENT_NAME hps_0_l3regs
#define HPS_0_L3REGS_BASE 0xff800000
#define HPS_0_L3REGS_SPAN 4096
#define HPS_0_L3REGS_END 0xff800fff

/*
 * Macros for device 'hps_0_nand0', class 'denali_nand'
 * The macros are prefixed with 'HPS_0_NAND0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_NAND0_COMPONENT_TYPE denali_nand
#define HPS_0_NAND0_COMPONENT_NAME hps_0_nand0
#define HPS_0_NAND0_BASE 0xff900000
#define HPS_0_NAND0_SPAN 65536
#define HPS_0_NAND0_END 0xff90ffff

/*
 * Macros for device 'hps_0_usb0', class 'usb'
 * The macros are prefixed with 'HPS_0_USB0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_USB0_COMPONENT_TYPE usb
#define HPS_0_USB0_COMPONENT_NAME hps_0_usb0
#define HPS_0_USB0_BASE 0xffb00000
#define HPS_0_USB0_SPAN 262144
#define HPS_0_USB0_END 0xffb3ffff

/*
 * Macros for device 'hps_0_usb1', class 'usb'
 * The macros are prefixed with 'HPS_0_USB1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_USB1_COMPONENT_TYPE usb
#define HPS_0_USB1_COMPONENT_NAME hps_0_usb1
#define HPS_0_USB1_BASE 0xffb40000
#define HPS_0_USB1_SPAN 262144
#define HPS_0_USB1_END 0xffb7ffff

/*
 * Macros for device 'hps_0_dcan0', class 'bosch_dcan'
 * The macros are prefixed with 'HPS_0_DCAN0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_DCAN0_COMPONENT_TYPE bosch_dcan
#define HPS_0_DCAN0_COMPONENT_NAME hps_0_dcan0
#define HPS_0_DCAN0_BASE 0xffc00000
#define HPS_0_DCAN0_SPAN 4096
#define HPS_0_DCAN0_END 0xffc00fff

/*
 * Macros for device 'hps_0_dcan1', class 'bosch_dcan'
 * The macros are prefixed with 'HPS_0_DCAN1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_DCAN1_COMPONENT_TYPE bosch_dcan
#define HPS_0_DCAN1_COMPONENT_NAME hps_0_dcan1
#define HPS_0_DCAN1_BASE 0xffc01000
#define HPS_0_DCAN1_SPAN 4096
#define HPS_0_DCAN1_END 0xffc01fff

/*
 * Macros for device 'hps_0_uart0', class 'snps_uart'
 * The macros are prefixed with 'HPS_0_UART0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_UART0_COMPONENT_TYPE snps_uart
#define HPS_0_UART0_COMPONENT_NAME hps_0_uart0
#define HPS_0_UART0_BASE 0xffc02000
#define HPS_0_UART0_SPAN 256
#define HPS_0_UART0_END 0xffc020ff
#define HPS_0_UART0_FIFO_DEPTH 128
#define HPS_0_UART0_FIFO_HWFC 0
#define HPS_0_UART0_FIFO_MODE 1
#define HPS_0_UART0_FIFO_SWFC 0
#define HPS_0_UART0_FREQ 100000000

/*
 * Macros for device 'hps_0_uart1', class 'snps_uart'
 * The macros are prefixed with 'HPS_0_UART1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_UART1_COMPONENT_TYPE snps_uart
#define HPS_0_UART1_COMPONENT_NAME hps_0_uart1
#define HPS_0_UART1_BASE 0xffc03000
#define HPS_0_UART1_SPAN 256
#define HPS_0_UART1_END 0xffc030ff
#define HPS_0_UART1_FIFO_DEPTH 128
#define HPS_0_UART1_FIFO_HWFC 0
#define HPS_0_UART1_FIFO_MODE 1
#define HPS_0_UART1_FIFO_SWFC 0
#define HPS_0_UART1_FREQ 100000000

/*
 * Macros for device 'hps_0_i2c0', class 'designware_i2c'
 * The macros are prefixed with 'HPS_0_I2C0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_I2C0_COMPONENT_TYPE designware_i2c
#define HPS_0_I2C0_COMPONENT_NAME hps_0_i2c0
#define HPS_0_I2C0_BASE 0xffc04000
#define HPS_0_I2C0_SPAN 256
#define HPS_0_I2C0_END 0xffc040ff

/*
 * Macros for device 'hps_0_i2c1', class 'designware_i2c'
 * The macros are prefixed with 'HPS_0_I2C1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_I2C1_COMPONENT_TYPE designware_i2c
#define HPS_0_I2C1_COMPONENT_NAME hps_0_i2c1
#define HPS_0_I2C1_BASE 0xffc05000
#define HPS_0_I2C1_SPAN 256
#define HPS_0_I2C1_END 0xffc050ff

/*
 * Macros for device 'hps_0_i2c2', class 'designware_i2c'
 * The macros are prefixed with 'HPS_0_I2C2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_I2C2_COMPONENT_TYPE designware_i2c
#define HPS_0_I2C2_COMPONENT_NAME hps_0_i2c2
#define HPS_0_I2C2_BASE 0xffc06000
#define HPS_0_I2C2_SPAN 256
#define HPS_0_I2C2_END 0xffc060ff

/*
 * Macros for device 'hps_0_i2c3', class 'designware_i2c'
 * The macros are prefixed with 'HPS_0_I2C3_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_I2C3_COMPONENT_TYPE designware_i2c
#define HPS_0_I2C3_COMPONENT_NAME hps_0_i2c3
#define HPS_0_I2C3_BASE 0xffc07000
#define HPS_0_I2C3_SPAN 256
#define HPS_0_I2C3_END 0xffc070ff

/*
 * Macros for device 'hps_0_timer0', class 'dw_apb_timer_sp'
 * The macros are prefixed with 'HPS_0_TIMER0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER0_COMPONENT_TYPE dw_apb_timer_sp
#define HPS_0_TIMER0_COMPONENT_NAME hps_0_timer0
#define HPS_0_TIMER0_BASE 0xffc08000
#define HPS_0_TIMER0_SPAN 256
#define HPS_0_TIMER0_END 0xffc080ff

/*
 * Macros for device 'hps_0_timer1', class 'dw_apb_timer_sp'
 * The macros are prefixed with 'HPS_0_TIMER1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER1_COMPONENT_TYPE dw_apb_timer_sp
#define HPS_0_TIMER1_COMPONENT_NAME hps_0_timer1
#define HPS_0_TIMER1_BASE 0xffc09000
#define HPS_0_TIMER1_SPAN 256
#define HPS_0_TIMER1_END 0xffc090ff

/*
 * Macros for device 'hps_0_sdrctl', class 'altera_sdrctl'
 * The macros are prefixed with 'HPS_0_SDRCTL_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SDRCTL_COMPONENT_TYPE altera_sdrctl
#define HPS_0_SDRCTL_COMPONENT_NAME hps_0_sdrctl
#define HPS_0_SDRCTL_BASE 0xffc25000
#define HPS_0_SDRCTL_SPAN 4096
#define HPS_0_SDRCTL_END 0xffc25fff

/*
 * Macros for device 'hps_0_timer2', class 'dw_apb_timer_osc'
 * The macros are prefixed with 'HPS_0_TIMER2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER2_COMPONENT_TYPE dw_apb_timer_osc
#define HPS_0_TIMER2_COMPONENT_NAME hps_0_timer2
#define HPS_0_TIMER2_BASE 0xffd00000
#define HPS_0_TIMER2_SPAN 256
#define HPS_0_TIMER2_END 0xffd000ff

/*
 * Macros for device 'hps_0_timer3', class 'dw_apb_timer_osc'
 * The macros are prefixed with 'HPS_0_TIMER3_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER3_COMPONENT_TYPE dw_apb_timer_osc
#define HPS_0_TIMER3_COMPONENT_NAME hps_0_timer3
#define HPS_0_TIMER3_BASE 0xffd01000
#define HPS_0_TIMER3_SPAN 256
#define HPS_0_TIMER3_END 0xffd010ff

/*
 * Macros for device 'hps_0_clkmgr', class 'asimov_clkmgr'
 * The macros are prefixed with 'HPS_0_CLKMGR_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_CLKMGR_COMPONENT_TYPE asimov_clkmgr
#define HPS_0_CLKMGR_COMPONENT_NAME hps_0_clkmgr
#define HPS_0_CLKMGR_BASE 0xffd04000
#define HPS_0_CLKMGR_SPAN 4096
#define HPS_0_CLKMGR_END 0xffd04fff

/*
 * Macros for device 'hps_0_rstmgr', class 'altera_rstmgr'
 * The macros are prefixed with 'HPS_0_RSTMGR_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_RSTMGR_COMPONENT_TYPE altera_rstmgr
#define HPS_0_RSTMGR_COMPONENT_NAME hps_0_rstmgr
#define HPS_0_RSTMGR_BASE 0xffd05000
#define HPS_0_RSTMGR_SPAN 256
#define HPS_0_RSTMGR_END 0xffd050ff

/*
 * Macros for device 'hps_0_sysmgr', class 'altera_sysmgr'
 * The macros are prefixed with 'HPS_0_SYSMGR_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SYSMGR_COMPONENT_TYPE altera_sysmgr
#define HPS_0_SYSMGR_COMPONENT_NAME hps_0_sysmgr
#define HPS_0_SYSMGR_BASE 0xffd08000
#define HPS_0_SYSMGR_SPAN 1024
#define HPS_0_SYSMGR_END 0xffd083ff

/*
 * Macros for device 'hps_0_dma', class 'arm_pl330_dma'
 * The macros are prefixed with 'HPS_0_DMA_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_DMA_COMPONENT_TYPE arm_pl330_dma
#define HPS_0_DMA_COMPONENT_NAME hps_0_dma
#define HPS_0_DMA_BASE 0xffe01000
#define HPS_0_DMA_SPAN 4096
#define HPS_0_DMA_END 0xffe01fff

/*
 * Macros for device 'hps_0_spim0', class 'spi'
 * The macros are prefixed with 'HPS_0_SPIM0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SPIM0_COMPONENT_TYPE spi
#define HPS_0_SPIM0_COMPONENT_NAME hps_0_spim0
#define HPS_0_SPIM0_BASE 0xfff00000
#define HPS_0_SPIM0_SPAN 256
#define HPS_0_SPIM0_END 0xfff000ff

/*
 * Macros for device 'hps_0_spim1', class 'spi'
 * The macros are prefixed with 'HPS_0_SPIM1_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_SPIM1_COMPONENT_TYPE spi
#define HPS_0_SPIM1_COMPONENT_NAME hps_0_spim1
#define HPS_0_SPIM1_BASE 0xfff01000
#define HPS_0_SPIM1_SPAN 256
#define HPS_0_SPIM1_END 0xfff010ff

/*
 * Macros for device 'hps_0_timer', class 'arm_internal_timer'
 * The macros are prefixed with 'HPS_0_TIMER_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_TIMER_COMPONENT_TYPE arm_internal_timer
#define HPS_0_TIMER_COMPONENT_NAME hps_0_timer
#define HPS_0_TIMER_BASE 0xfffec600
#define HPS_0_TIMER_SPAN 256
#define HPS_0_TIMER_END 0xfffec6ff

/*
 * Macros for device 'hps_0_arm_gic_0', class 'arm_gic'
 * The macros are prefixed with 'HPS_0_ARM_GIC_0_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_ARM_GIC_0_COMPONENT_TYPE arm_gic
#define HPS_0_ARM_GIC_0_COMPONENT_NAME hps_0_arm_gic_0
#define HPS_0_ARM_GIC_0_BASE 0xfffed000
#define HPS_0_ARM_GIC_0_SPAN 4096
#define HPS_0_ARM_GIC_0_END 0xfffedfff

/*
 * Macros for device 'hps_0_L2', class 'arm_pl310_L2'
 * The macros are prefixed with 'HPS_0_L2_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_L2_COMPONENT_TYPE arm_pl310_L2
#define HPS_0_L2_COMPONENT_NAME hps_0_L2
#define HPS_0_L2_BASE 0xfffef000
#define HPS_0_L2_SPAN 4096
#define HPS_0_L2_END 0xfffeffff

/*
 * Macros for device 'hps_0_axi_ocram', class 'axi_ocram'
 * The macros are prefixed with 'HPS_0_AXI_OCRAM_'.
 * The prefix is the slave descriptor.
 */
#define HPS_0_AXI_OCRAM_COMPONENT_TYPE axi_ocram
#define HPS_0_AXI_OCRAM_COMPONENT_NAME hps_0_axi_ocram
#define HPS_0_AXI_OCRAM_BASE 0xffff0000
#define HPS_0_AXI_OCRAM_SPAN 65536
#define HPS_0_AXI_OCRAM_END 0xffffffff
#define HPS_0_AXI_OCRAM_SIZE_MULTIPLE 1
#define HPS_0_AXI_OCRAM_SIZE_VALUE 1<<16
#define HPS_0_AXI_OCRAM_WRITABLE 1
#define HPS_0_AXI_OCRAM_MEMORY_INFO_GENERATE_DAT_SYM 0
#define HPS_0_AXI_OCRAM_MEMORY_INFO_GENERATE_HEX 0
#define HPS_0_AXI_OCRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16


#endif /* _ALTERA_HPS_0_BRIDGES_H_ */
