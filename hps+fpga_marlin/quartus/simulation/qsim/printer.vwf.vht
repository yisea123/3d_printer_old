-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- *****************************************************************************
-- This file contains a Vhdl test bench with test vectors .The test vectors     
-- are exported from a vector file in the Quartus Waveform Editor and apply to  
-- the top level entity of the current Quartus project .The user can use this   
-- testbench to simulate his design using a third-party simulation tool .       
-- *****************************************************************************
-- Generated on "01/20/2019 16:40:52"
                                                             
-- Vhdl Test Bench(with test vectors) for design  :          printer
-- 
-- Simulation tool : 3rd Party
-- 

LIBRARY ieee;                                               
USE ieee.std_logic_1164.all;                                

ENTITY printer_vhd_vec_tst IS
END printer_vhd_vec_tst;
ARCHITECTURE printer_arch OF printer_vhd_vec_tst IS
-- constants                                                 
-- signals                                                   
SIGNAL ADC_CONVST : STD_LOGIC;
SIGNAL ADC_SCK : STD_LOGIC;
SIGNAL ADC_SDI : STD_LOGIC;
SIGNAL ADC_SDO : STD_LOGIC;
SIGNAL ARDUINO_IO : STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL ARDUINO_RESET_N : STD_LOGIC;
SIGNAL FPGA_CLK1_50 : STD_LOGIC;
SIGNAL FPGA_CLK2_50 : STD_LOGIC;
SIGNAL FPGA_CLK3_50 : STD_LOGIC;
SIGNAL HDMI_I2C_SCL : STD_LOGIC;
SIGNAL HDMI_I2C_SDA : STD_LOGIC;
SIGNAL HDMI_I2S : STD_LOGIC;
SIGNAL HDMI_LRCLK : STD_LOGIC;
SIGNAL HDMI_MCLK : STD_LOGIC;
SIGNAL HDMI_SCLK : STD_LOGIC;
SIGNAL HDMI_TX_CLK : STD_LOGIC;
SIGNAL HDMI_TX_D : STD_LOGIC_VECTOR(23 DOWNTO 0);
SIGNAL HDMI_TX_DE : STD_LOGIC;
SIGNAL HDMI_TX_HS : STD_LOGIC;
SIGNAL HDMI_TX_INT : STD_LOGIC;
SIGNAL HDMI_TX_VS : STD_LOGIC;
SIGNAL HPS_CONV_USB_N : STD_LOGIC;
SIGNAL HPS_DDR3_ADDR : STD_LOGIC_VECTOR(14 DOWNTO 0);
SIGNAL HPS_DDR3_BA : STD_LOGIC_VECTOR(2 DOWNTO 0);
SIGNAL HPS_DDR3_CAS_N : STD_LOGIC;
SIGNAL HPS_DDR3_CKE : STD_LOGIC;
SIGNAL HPS_DDR3_CK_N : STD_LOGIC;
SIGNAL HPS_DDR3_CK_P : STD_LOGIC;
SIGNAL HPS_DDR3_CS_N : STD_LOGIC;
SIGNAL HPS_DDR3_DM : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL HPS_DDR3_DQ : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL HPS_DDR3_DQS_N : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL HPS_DDR3_DQS_P : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL HPS_DDR3_ODT : STD_LOGIC;
SIGNAL HPS_DDR3_RAS_N : STD_LOGIC;
SIGNAL HPS_DDR3_RESET_N : STD_LOGIC;
SIGNAL HPS_DDR3_RZQ : STD_LOGIC;
SIGNAL HPS_DDR3_WE_N : STD_LOGIC;
SIGNAL HPS_ENET_GTX_CLK : STD_LOGIC;
SIGNAL HPS_ENET_INT_N : STD_LOGIC;
SIGNAL HPS_ENET_MDC : STD_LOGIC;
SIGNAL HPS_ENET_MDIO : STD_LOGIC;
SIGNAL HPS_ENET_RX_CLK : STD_LOGIC;
SIGNAL HPS_ENET_RX_DATA : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL HPS_ENET_RX_DV : STD_LOGIC;
SIGNAL HPS_ENET_TX_DATA : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL HPS_ENET_TX_EN : STD_LOGIC;
SIGNAL HPS_GSENSOR_INT : STD_LOGIC;
SIGNAL HPS_I2C0_SCLK : STD_LOGIC;
SIGNAL HPS_I2C0_SDAT : STD_LOGIC;
SIGNAL HPS_I2C1_SCLK : STD_LOGIC;
SIGNAL HPS_I2C1_SDAT : STD_LOGIC;
SIGNAL HPS_KEY : STD_LOGIC;
SIGNAL HPS_LED : STD_LOGIC;
SIGNAL HPS_LTC_GPIO : STD_LOGIC;
SIGNAL HPS_SD_CLK : STD_LOGIC;
SIGNAL HPS_SD_CMD : STD_LOGIC;
SIGNAL HPS_SD_DATA : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL HPS_SPIM_CLK : STD_LOGIC;
SIGNAL HPS_SPIM_MISO : STD_LOGIC;
SIGNAL HPS_SPIM_MOSI : STD_LOGIC;
SIGNAL HPS_SPIM_SS : STD_LOGIC;
SIGNAL HPS_UART_RX : STD_LOGIC;
SIGNAL HPS_UART_TX : STD_LOGIC;
SIGNAL HPS_USB_CLKOUT : STD_LOGIC;
SIGNAL HPS_USB_DATA : STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL HPS_USB_DIR : STD_LOGIC;
SIGNAL HPS_USB_NXT : STD_LOGIC;
SIGNAL HPS_USB_STP : STD_LOGIC;
SIGNAL KEY : STD_LOGIC_VECTOR(1 DOWNTO 0);
SIGNAL LED : STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL SW : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL gpio0GPIO : STD_LOGIC_VECTOR(35 DOWNTO 0);
SIGNAL gpio1GPIO : STD_LOGIC_VECTOR(35 DOWNTO 0);
COMPONENT printer
	PORT (
	ADC_CONVST : OUT STD_LOGIC;
	ADC_SCK : OUT STD_LOGIC;
	ADC_SDI : OUT STD_LOGIC;
	ADC_SDO : IN STD_LOGIC;
	ARDUINO_IO : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
	ARDUINO_RESET_N : INOUT STD_LOGIC;
	FPGA_CLK1_50 : IN STD_LOGIC;
	FPGA_CLK2_50 : IN STD_LOGIC;
	FPGA_CLK3_50 : IN STD_LOGIC;
	HDMI_I2C_SCL : INOUT STD_LOGIC;
	HDMI_I2C_SDA : INOUT STD_LOGIC;
	HDMI_I2S : INOUT STD_LOGIC;
	HDMI_LRCLK : INOUT STD_LOGIC;
	HDMI_MCLK : INOUT STD_LOGIC;
	HDMI_SCLK : INOUT STD_LOGIC;
	HDMI_TX_CLK : OUT STD_LOGIC;
	HDMI_TX_D : OUT STD_LOGIC_VECTOR(23 DOWNTO 0);
	HDMI_TX_DE : OUT STD_LOGIC;
	HDMI_TX_HS : OUT STD_LOGIC;
	HDMI_TX_INT : IN STD_LOGIC;
	HDMI_TX_VS : OUT STD_LOGIC;
	HPS_CONV_USB_N : INOUT STD_LOGIC;
	HPS_DDR3_ADDR : OUT STD_LOGIC_VECTOR(14 DOWNTO 0);
	HPS_DDR3_BA : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
	HPS_DDR3_CAS_N : OUT STD_LOGIC;
	HPS_DDR3_CKE : OUT STD_LOGIC;
	HPS_DDR3_CK_N : OUT STD_LOGIC;
	HPS_DDR3_CK_P : OUT STD_LOGIC;
	HPS_DDR3_CS_N : OUT STD_LOGIC;
	HPS_DDR3_DM : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	HPS_DDR3_DQ : INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	HPS_DDR3_DQS_N : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	HPS_DDR3_DQS_P : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	HPS_DDR3_ODT : OUT STD_LOGIC;
	HPS_DDR3_RAS_N : OUT STD_LOGIC;
	HPS_DDR3_RESET_N : OUT STD_LOGIC;
	HPS_DDR3_RZQ : IN STD_LOGIC;
	HPS_DDR3_WE_N : OUT STD_LOGIC;
	HPS_ENET_GTX_CLK : OUT STD_LOGIC;
	HPS_ENET_INT_N : INOUT STD_LOGIC;
	HPS_ENET_MDC : OUT STD_LOGIC;
	HPS_ENET_MDIO : INOUT STD_LOGIC;
	HPS_ENET_RX_CLK : IN STD_LOGIC;
	HPS_ENET_RX_DATA : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
	HPS_ENET_RX_DV : IN STD_LOGIC;
	HPS_ENET_TX_DATA : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	HPS_ENET_TX_EN : OUT STD_LOGIC;
	HPS_GSENSOR_INT : INOUT STD_LOGIC;
	HPS_I2C0_SCLK : INOUT STD_LOGIC;
	HPS_I2C0_SDAT : INOUT STD_LOGIC;
	HPS_I2C1_SCLK : INOUT STD_LOGIC;
	HPS_I2C1_SDAT : INOUT STD_LOGIC;
	HPS_KEY : INOUT STD_LOGIC;
	HPS_LED : INOUT STD_LOGIC;
	HPS_LTC_GPIO : INOUT STD_LOGIC;
	HPS_SD_CLK : OUT STD_LOGIC;
	HPS_SD_CMD : INOUT STD_LOGIC;
	HPS_SD_DATA : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	HPS_SPIM_CLK : OUT STD_LOGIC;
	HPS_SPIM_MISO : IN STD_LOGIC;
	HPS_SPIM_MOSI : OUT STD_LOGIC;
	HPS_SPIM_SS : INOUT STD_LOGIC;
	HPS_UART_RX : IN STD_LOGIC;
	HPS_UART_TX : OUT STD_LOGIC;
	HPS_USB_CLKOUT : IN STD_LOGIC;
	HPS_USB_DATA : INOUT STD_LOGIC_VECTOR(7 DOWNTO 0);
	HPS_USB_DIR : IN STD_LOGIC;
	HPS_USB_NXT : IN STD_LOGIC;
	HPS_USB_STP : OUT STD_LOGIC;
	KEY : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
	LED : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
	SW : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
	gpio0GPIO : INOUT STD_LOGIC_VECTOR(35 DOWNTO 0);
	gpio1GPIO : INOUT STD_LOGIC_VECTOR(35 DOWNTO 0)
	);
END COMPONENT;
BEGIN
	i1 : printer
	PORT MAP (
-- list connections between master ports and signals
	ADC_CONVST => ADC_CONVST,
	ADC_SCK => ADC_SCK,
	ADC_SDI => ADC_SDI,
	ADC_SDO => ADC_SDO,
	ARDUINO_IO => ARDUINO_IO,
	ARDUINO_RESET_N => ARDUINO_RESET_N,
	FPGA_CLK1_50 => FPGA_CLK1_50,
	FPGA_CLK2_50 => FPGA_CLK2_50,
	FPGA_CLK3_50 => FPGA_CLK3_50,
	HDMI_I2C_SCL => HDMI_I2C_SCL,
	HDMI_I2C_SDA => HDMI_I2C_SDA,
	HDMI_I2S => HDMI_I2S,
	HDMI_LRCLK => HDMI_LRCLK,
	HDMI_MCLK => HDMI_MCLK,
	HDMI_SCLK => HDMI_SCLK,
	HDMI_TX_CLK => HDMI_TX_CLK,
	HDMI_TX_D => HDMI_TX_D,
	HDMI_TX_DE => HDMI_TX_DE,
	HDMI_TX_HS => HDMI_TX_HS,
	HDMI_TX_INT => HDMI_TX_INT,
	HDMI_TX_VS => HDMI_TX_VS,
	HPS_CONV_USB_N => HPS_CONV_USB_N,
	HPS_DDR3_ADDR => HPS_DDR3_ADDR,
	HPS_DDR3_BA => HPS_DDR3_BA,
	HPS_DDR3_CAS_N => HPS_DDR3_CAS_N,
	HPS_DDR3_CKE => HPS_DDR3_CKE,
	HPS_DDR3_CK_N => HPS_DDR3_CK_N,
	HPS_DDR3_CK_P => HPS_DDR3_CK_P,
	HPS_DDR3_CS_N => HPS_DDR3_CS_N,
	HPS_DDR3_DM => HPS_DDR3_DM,
	HPS_DDR3_DQ => HPS_DDR3_DQ,
	HPS_DDR3_DQS_N => HPS_DDR3_DQS_N,
	HPS_DDR3_DQS_P => HPS_DDR3_DQS_P,
	HPS_DDR3_ODT => HPS_DDR3_ODT,
	HPS_DDR3_RAS_N => HPS_DDR3_RAS_N,
	HPS_DDR3_RESET_N => HPS_DDR3_RESET_N,
	HPS_DDR3_RZQ => HPS_DDR3_RZQ,
	HPS_DDR3_WE_N => HPS_DDR3_WE_N,
	HPS_ENET_GTX_CLK => HPS_ENET_GTX_CLK,
	HPS_ENET_INT_N => HPS_ENET_INT_N,
	HPS_ENET_MDC => HPS_ENET_MDC,
	HPS_ENET_MDIO => HPS_ENET_MDIO,
	HPS_ENET_RX_CLK => HPS_ENET_RX_CLK,
	HPS_ENET_RX_DATA => HPS_ENET_RX_DATA,
	HPS_ENET_RX_DV => HPS_ENET_RX_DV,
	HPS_ENET_TX_DATA => HPS_ENET_TX_DATA,
	HPS_ENET_TX_EN => HPS_ENET_TX_EN,
	HPS_GSENSOR_INT => HPS_GSENSOR_INT,
	HPS_I2C0_SCLK => HPS_I2C0_SCLK,
	HPS_I2C0_SDAT => HPS_I2C0_SDAT,
	HPS_I2C1_SCLK => HPS_I2C1_SCLK,
	HPS_I2C1_SDAT => HPS_I2C1_SDAT,
	HPS_KEY => HPS_KEY,
	HPS_LED => HPS_LED,
	HPS_LTC_GPIO => HPS_LTC_GPIO,
	HPS_SD_CLK => HPS_SD_CLK,
	HPS_SD_CMD => HPS_SD_CMD,
	HPS_SD_DATA => HPS_SD_DATA,
	HPS_SPIM_CLK => HPS_SPIM_CLK,
	HPS_SPIM_MISO => HPS_SPIM_MISO,
	HPS_SPIM_MOSI => HPS_SPIM_MOSI,
	HPS_SPIM_SS => HPS_SPIM_SS,
	HPS_UART_RX => HPS_UART_RX,
	HPS_UART_TX => HPS_UART_TX,
	HPS_USB_CLKOUT => HPS_USB_CLKOUT,
	HPS_USB_DATA => HPS_USB_DATA,
	HPS_USB_DIR => HPS_USB_DIR,
	HPS_USB_NXT => HPS_USB_NXT,
	HPS_USB_STP => HPS_USB_STP,
	KEY => KEY,
	LED => LED,
	SW => SW,
	gpio0GPIO => gpio0GPIO,
	gpio1GPIO => gpio1GPIO
	);

-- FPGA_CLK1_50
t_prcs_FPGA_CLK1_50: PROCESS
BEGIN
LOOP
	FPGA_CLK1_50 <= '0';
	WAIT FOR 10000 ps;
	FPGA_CLK1_50 <= '1';
	WAIT FOR 10000 ps;
	IF (NOW >= 1000000 ps) THEN WAIT; END IF;
END LOOP;
END PROCESS t_prcs_FPGA_CLK1_50;

-- FPGA_CLK2_50
t_prcs_FPGA_CLK2_50: PROCESS
BEGIN
	FPGA_CLK2_50 <= '0';
WAIT;
END PROCESS t_prcs_FPGA_CLK2_50;

-- FPGA_CLK3_50
t_prcs_FPGA_CLK3_50: PROCESS
BEGIN
	FPGA_CLK3_50 <= '0';
WAIT;
END PROCESS t_prcs_FPGA_CLK3_50;
END printer_arch;
