// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/21/2019 20:07:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          clk_gen
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module clk_gen_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [30:0] count;
reg [31:0] reduction;
reg reset;
// wires                                               
wire clk_out;
wire finish;

// assign statements (if any)                          
clk_gen i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_out(clk_out),
	.count(count),
	.finish(finish),
	.reduction(reduction),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// count[ 30 ]
initial
begin
	count[30] = 1'b0;
end 
// count[ 29 ]
initial
begin
	count[29] = 1'b0;
end 
// count[ 28 ]
initial
begin
	count[28] = 1'b0;
end 
// count[ 27 ]
initial
begin
	count[27] = 1'b0;
end 
// count[ 26 ]
initial
begin
	count[26] = 1'b0;
end 
// count[ 25 ]
initial
begin
	count[25] = 1'b0;
end 
// count[ 24 ]
initial
begin
	count[24] = 1'b0;
end 
// count[ 23 ]
initial
begin
	count[23] = 1'b0;
end 
// count[ 22 ]
initial
begin
	count[22] = 1'b0;
end 
// count[ 21 ]
initial
begin
	count[21] = 1'b0;
end 
// count[ 20 ]
initial
begin
	count[20] = 1'b0;
end 
// count[ 19 ]
initial
begin
	count[19] = 1'b0;
end 
// count[ 18 ]
initial
begin
	count[18] = 1'b0;
end 
// count[ 17 ]
initial
begin
	count[17] = 1'b0;
end 
// count[ 16 ]
initial
begin
	count[16] = 1'b0;
end 
// count[ 15 ]
initial
begin
	count[15] = 1'b0;
end 
// count[ 14 ]
initial
begin
	count[14] = 1'b0;
end 
// count[ 13 ]
initial
begin
	count[13] = 1'b0;
end 
// count[ 12 ]
initial
begin
	count[12] = 1'b0;
end 
// count[ 11 ]
initial
begin
	count[11] = 1'b0;
end 
// count[ 10 ]
initial
begin
	count[10] = 1'b0;
end 
// count[ 9 ]
initial
begin
	count[9] = 1'b0;
end 
// count[ 8 ]
initial
begin
	count[8] = 1'b0;
end 
// count[ 7 ]
initial
begin
	count[7] = 1'b0;
end 
// count[ 6 ]
initial
begin
	count[6] = 1'b0;
end 
// count[ 5 ]
initial
begin
	count[5] = 1'b0;
end 
// count[ 4 ]
initial
begin
	count[4] = 1'b0;
end 
// count[ 3 ]
initial
begin
	count[3] = 1'b1;
end 
// count[ 2 ]
initial
begin
	count[2] = 1'b0;
end 
// count[ 1 ]
initial
begin
	count[1] = 1'b1;
end 
// count[ 0 ]
initial
begin
	count[0] = 1'b0;
end 
// reduction[ 31 ]
initial
begin
	reduction[31] = 1'b0;
end 
// reduction[ 30 ]
initial
begin
	reduction[30] = 1'b0;
end 
// reduction[ 29 ]
initial
begin
	reduction[29] = 1'b0;
end 
// reduction[ 28 ]
initial
begin
	reduction[28] = 1'b0;
end 
// reduction[ 27 ]
initial
begin
	reduction[27] = 1'b0;
end 
// reduction[ 26 ]
initial
begin
	reduction[26] = 1'b0;
end 
// reduction[ 25 ]
initial
begin
	reduction[25] = 1'b0;
end 
// reduction[ 24 ]
initial
begin
	reduction[24] = 1'b0;
end 
// reduction[ 23 ]
initial
begin
	reduction[23] = 1'b0;
end 
// reduction[ 22 ]
initial
begin
	reduction[22] = 1'b0;
end 
// reduction[ 21 ]
initial
begin
	reduction[21] = 1'b0;
end 
// reduction[ 20 ]
initial
begin
	reduction[20] = 1'b0;
end 
// reduction[ 19 ]
initial
begin
	reduction[19] = 1'b0;
end 
// reduction[ 18 ]
initial
begin
	reduction[18] = 1'b0;
end 
// reduction[ 17 ]
initial
begin
	reduction[17] = 1'b0;
end 
// reduction[ 16 ]
initial
begin
	reduction[16] = 1'b0;
end 
// reduction[ 15 ]
initial
begin
	reduction[15] = 1'b0;
end 
// reduction[ 14 ]
initial
begin
	reduction[14] = 1'b0;
end 
// reduction[ 13 ]
initial
begin
	reduction[13] = 1'b0;
end 
// reduction[ 12 ]
initial
begin
	reduction[12] = 1'b0;
end 
// reduction[ 11 ]
initial
begin
	reduction[11] = 1'b0;
end 
// reduction[ 10 ]
initial
begin
	reduction[10] = 1'b0;
end 
// reduction[ 9 ]
initial
begin
	reduction[9] = 1'b0;
end 
// reduction[ 8 ]
initial
begin
	reduction[8] = 1'b0;
end 
// reduction[ 7 ]
initial
begin
	reduction[7] = 1'b0;
end 
// reduction[ 6 ]
initial
begin
	reduction[6] = 1'b0;
end 
// reduction[ 5 ]
initial
begin
	reduction[5] = 1'b0;
end 
// reduction[ 4 ]
initial
begin
	reduction[4] = 1'b0;
end 
// reduction[ 3 ]
initial
begin
	reduction[3] = 1'b0;
end 
// reduction[ 2 ]
initial
begin
	reduction[2] = 1'b0;
end 
// reduction[ 1 ]
initial
begin
	reduction[1] = 1'b1;
end 
// reduction[ 0 ]
initial
begin
	reduction[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 
endmodule

