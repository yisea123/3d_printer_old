// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/20/2019 16:42:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          printer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module printer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADC_SDO;
reg [15:0] treg_ARDUINO_IO;
reg treg_ARDUINO_RESET_N;
reg FPGA_CLK1_50;
reg FPGA_CLK2_50;
reg FPGA_CLK3_50;
reg treg_HDMI_I2C_SCL;
reg treg_HDMI_I2C_SDA;
reg treg_HDMI_I2S;
reg treg_HDMI_LRCLK;
reg treg_HDMI_MCLK;
reg treg_HDMI_SCLK;
reg HDMI_TX_INT;
reg treg_HPS_CONV_USB_N;
reg [31:0] treg_HPS_DDR3_DQ;
reg [3:0] treg_HPS_DDR3_DQS_N;
reg [3:0] treg_HPS_DDR3_DQS_P;
reg HPS_DDR3_RZQ;
reg treg_HPS_ENET_INT_N;
reg treg_HPS_ENET_MDIO;
reg HPS_ENET_RX_CLK;
reg [3:0] HPS_ENET_RX_DATA;
reg HPS_ENET_RX_DV;
reg treg_HPS_GSENSOR_INT;
reg treg_HPS_I2C0_SCLK;
reg treg_HPS_I2C0_SDAT;
reg treg_HPS_I2C1_SCLK;
reg treg_HPS_I2C1_SDAT;
reg treg_HPS_KEY;
reg treg_HPS_LED;
reg treg_HPS_LTC_GPIO;
reg treg_HPS_SD_CMD;
reg [3:0] treg_HPS_SD_DATA;
reg HPS_SPIM_MISO;
reg treg_HPS_SPIM_SS;
reg HPS_UART_RX;
reg HPS_USB_CLKOUT;
reg [7:0] treg_HPS_USB_DATA;
reg HPS_USB_DIR;
reg HPS_USB_NXT;
reg [1:0] KEY;
reg [3:0] SW;
reg [35:0] treg_gpio0GPIO;
reg [35:0] treg_gpio1GPIO;
// wires                                               
wire ADC_CONVST;
wire ADC_SCK;
wire ADC_SDI;
wire [15:0] ARDUINO_IO;
wire ARDUINO_RESET_N;
wire HDMI_I2C_SCL;
wire HDMI_I2C_SDA;
wire HDMI_I2S;
wire HDMI_LRCLK;
wire HDMI_MCLK;
wire HDMI_SCLK;
wire HDMI_TX_CLK;
wire [23:0] HDMI_TX_D;
wire HDMI_TX_DE;
wire HDMI_TX_HS;
wire HDMI_TX_VS;
wire HPS_CONV_USB_N;
wire [14:0] HPS_DDR3_ADDR;
wire [2:0] HPS_DDR3_BA;
wire HPS_DDR3_CAS_N;
wire HPS_DDR3_CKE;
wire HPS_DDR3_CK_N;
wire HPS_DDR3_CK_P;
wire HPS_DDR3_CS_N;
wire [3:0] HPS_DDR3_DM;
wire [31:0] HPS_DDR3_DQ;
wire [3:0] HPS_DDR3_DQS_N;
wire [3:0] HPS_DDR3_DQS_P;
wire HPS_DDR3_ODT;
wire HPS_DDR3_RAS_N;
wire HPS_DDR3_RESET_N;
wire HPS_DDR3_WE_N;
wire HPS_ENET_GTX_CLK;
wire HPS_ENET_INT_N;
wire HPS_ENET_MDC;
wire HPS_ENET_MDIO;
wire [3:0] HPS_ENET_TX_DATA;
wire HPS_ENET_TX_EN;
wire HPS_GSENSOR_INT;
wire HPS_I2C0_SCLK;
wire HPS_I2C0_SDAT;
wire HPS_I2C1_SCLK;
wire HPS_I2C1_SDAT;
wire HPS_KEY;
wire HPS_LED;
wire HPS_LTC_GPIO;
wire HPS_SD_CLK;
wire HPS_SD_CMD;
wire [3:0] HPS_SD_DATA;
wire HPS_SPIM_CLK;
wire HPS_SPIM_MOSI;
wire HPS_SPIM_SS;
wire HPS_UART_TX;
wire [7:0] HPS_USB_DATA;
wire HPS_USB_STP;
wire [7:0] LED;
wire [35:0] gpio0GPIO;
wire [35:0] gpio1GPIO;

// assign statements (if any)                          
assign ARDUINO_IO = treg_ARDUINO_IO;
assign ARDUINO_RESET_N = treg_ARDUINO_RESET_N;
assign HDMI_I2C_SCL = treg_HDMI_I2C_SCL;
assign HDMI_I2C_SDA = treg_HDMI_I2C_SDA;
assign HDMI_I2S = treg_HDMI_I2S;
assign HDMI_LRCLK = treg_HDMI_LRCLK;
assign HDMI_MCLK = treg_HDMI_MCLK;
assign HDMI_SCLK = treg_HDMI_SCLK;
assign HPS_CONV_USB_N = treg_HPS_CONV_USB_N;
assign HPS_DDR3_DQ = treg_HPS_DDR3_DQ;
assign HPS_DDR3_DQS_N = treg_HPS_DDR3_DQS_N;
assign HPS_DDR3_DQS_P = treg_HPS_DDR3_DQS_P;
assign HPS_ENET_INT_N = treg_HPS_ENET_INT_N;
assign HPS_ENET_MDIO = treg_HPS_ENET_MDIO;
assign HPS_GSENSOR_INT = treg_HPS_GSENSOR_INT;
assign HPS_I2C0_SCLK = treg_HPS_I2C0_SCLK;
assign HPS_I2C0_SDAT = treg_HPS_I2C0_SDAT;
assign HPS_I2C1_SCLK = treg_HPS_I2C1_SCLK;
assign HPS_I2C1_SDAT = treg_HPS_I2C1_SDAT;
assign HPS_KEY = treg_HPS_KEY;
assign HPS_LED = treg_HPS_LED;
assign HPS_LTC_GPIO = treg_HPS_LTC_GPIO;
assign HPS_SD_CMD = treg_HPS_SD_CMD;
assign HPS_SD_DATA = treg_HPS_SD_DATA;
assign HPS_SPIM_SS = treg_HPS_SPIM_SS;
assign HPS_USB_DATA = treg_HPS_USB_DATA;
assign gpio0GPIO = treg_gpio0GPIO;
assign gpio1GPIO = treg_gpio1GPIO;
printer i1 (
// port map - connection between master ports and signals/registers   
	.ADC_CONVST(ADC_CONVST),
	.ADC_SCK(ADC_SCK),
	.ADC_SDI(ADC_SDI),
	.ADC_SDO(ADC_SDO),
	.ARDUINO_IO(ARDUINO_IO),
	.ARDUINO_RESET_N(ARDUINO_RESET_N),
	.FPGA_CLK1_50(FPGA_CLK1_50),
	.FPGA_CLK2_50(FPGA_CLK2_50),
	.FPGA_CLK3_50(FPGA_CLK3_50),
	.HDMI_I2C_SCL(HDMI_I2C_SCL),
	.HDMI_I2C_SDA(HDMI_I2C_SDA),
	.HDMI_I2S(HDMI_I2S),
	.HDMI_LRCLK(HDMI_LRCLK),
	.HDMI_MCLK(HDMI_MCLK),
	.HDMI_SCLK(HDMI_SCLK),
	.HDMI_TX_CLK(HDMI_TX_CLK),
	.HDMI_TX_D(HDMI_TX_D),
	.HDMI_TX_DE(HDMI_TX_DE),
	.HDMI_TX_HS(HDMI_TX_HS),
	.HDMI_TX_INT(HDMI_TX_INT),
	.HDMI_TX_VS(HDMI_TX_VS),
	.HPS_CONV_USB_N(HPS_CONV_USB_N),
	.HPS_DDR3_ADDR(HPS_DDR3_ADDR),
	.HPS_DDR3_BA(HPS_DDR3_BA),
	.HPS_DDR3_CAS_N(HPS_DDR3_CAS_N),
	.HPS_DDR3_CKE(HPS_DDR3_CKE),
	.HPS_DDR3_CK_N(HPS_DDR3_CK_N),
	.HPS_DDR3_CK_P(HPS_DDR3_CK_P),
	.HPS_DDR3_CS_N(HPS_DDR3_CS_N),
	.HPS_DDR3_DM(HPS_DDR3_DM),
	.HPS_DDR3_DQ(HPS_DDR3_DQ),
	.HPS_DDR3_DQS_N(HPS_DDR3_DQS_N),
	.HPS_DDR3_DQS_P(HPS_DDR3_DQS_P),
	.HPS_DDR3_ODT(HPS_DDR3_ODT),
	.HPS_DDR3_RAS_N(HPS_DDR3_RAS_N),
	.HPS_DDR3_RESET_N(HPS_DDR3_RESET_N),
	.HPS_DDR3_RZQ(HPS_DDR3_RZQ),
	.HPS_DDR3_WE_N(HPS_DDR3_WE_N),
	.HPS_ENET_GTX_CLK(HPS_ENET_GTX_CLK),
	.HPS_ENET_INT_N(HPS_ENET_INT_N),
	.HPS_ENET_MDC(HPS_ENET_MDC),
	.HPS_ENET_MDIO(HPS_ENET_MDIO),
	.HPS_ENET_RX_CLK(HPS_ENET_RX_CLK),
	.HPS_ENET_RX_DATA(HPS_ENET_RX_DATA),
	.HPS_ENET_RX_DV(HPS_ENET_RX_DV),
	.HPS_ENET_TX_DATA(HPS_ENET_TX_DATA),
	.HPS_ENET_TX_EN(HPS_ENET_TX_EN),
	.HPS_GSENSOR_INT(HPS_GSENSOR_INT),
	.HPS_I2C0_SCLK(HPS_I2C0_SCLK),
	.HPS_I2C0_SDAT(HPS_I2C0_SDAT),
	.HPS_I2C1_SCLK(HPS_I2C1_SCLK),
	.HPS_I2C1_SDAT(HPS_I2C1_SDAT),
	.HPS_KEY(HPS_KEY),
	.HPS_LED(HPS_LED),
	.HPS_LTC_GPIO(HPS_LTC_GPIO),
	.HPS_SD_CLK(HPS_SD_CLK),
	.HPS_SD_CMD(HPS_SD_CMD),
	.HPS_SD_DATA(HPS_SD_DATA),
	.HPS_SPIM_CLK(HPS_SPIM_CLK),
	.HPS_SPIM_MISO(HPS_SPIM_MISO),
	.HPS_SPIM_MOSI(HPS_SPIM_MOSI),
	.HPS_SPIM_SS(HPS_SPIM_SS),
	.HPS_UART_RX(HPS_UART_RX),
	.HPS_UART_TX(HPS_UART_TX),
	.HPS_USB_CLKOUT(HPS_USB_CLKOUT),
	.HPS_USB_DATA(HPS_USB_DATA),
	.HPS_USB_DIR(HPS_USB_DIR),
	.HPS_USB_NXT(HPS_USB_NXT),
	.HPS_USB_STP(HPS_USB_STP),
	.KEY(KEY),
	.LED(LED),
	.SW(SW),
	.gpio0GPIO(gpio0GPIO),
	.gpio1GPIO(gpio1GPIO)
);
initial 
begin 
#1000000 $finish;
end 

// FPGA_CLK1_50
always
begin
	FPGA_CLK1_50 = 1'b0;
	FPGA_CLK1_50 = #10000 1'b1;
	#10000;
end 

// FPGA_CLK2_50
initial
begin
	FPGA_CLK2_50 = 1'b0;
end 

// FPGA_CLK3_50
initial
begin
	FPGA_CLK3_50 = 1'b0;
end 
endmodule

