// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/27/2019 20:59:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          stepper_corexy_new
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module stepper_corexy_new_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg start_driving;
reg stepper_enable;
reg [31:0] stepper_speed_1;
reg [31:0] stepper_speed_2;
reg [31:0] stepper_step_in_1;
reg [31:0] stepper_step_in_2;
reg xmax;
reg xmin;
reg ymax;
reg ymin;
// wires                                               
wire dir_1;
wire dir_2;
wire enable_1;
wire enable_2;
wire [31:0] m1;
wire [31:0] m2;
wire [30:0] n1;
wire [30:0] n2;
wire step_signal_1;
wire step_signal_2;
wire [31:0] stepper_step_out_1;
wire [31:0] stepper_step_out_2;
wire steppers_driving;

// assign statements (if any)                          
stepper_corexy_new i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dir_1(dir_1),
	.dir_2(dir_2),
	.enable_1(enable_1),
	.enable_2(enable_2),
	.m1(m1),
	.m2(m2),
	.n1(n1),
	.n2(n2),
	.start_driving(start_driving),
	.step_signal_1(step_signal_1),
	.step_signal_2(step_signal_2),
	.stepper_enable(stepper_enable),
	.stepper_speed_1(stepper_speed_1),
	.stepper_speed_2(stepper_speed_2),
	.stepper_step_in_1(stepper_step_in_1),
	.stepper_step_in_2(stepper_step_in_2),
	.stepper_step_out_1(stepper_step_out_1),
	.stepper_step_out_2(stepper_step_out_2),
	.steppers_driving(steppers_driving),
	.xmax(xmax),
	.xmin(xmin),
	.ymax(ymax),
	.ymin(ymin)
);
initial 
begin 
#100000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #500000 1'b1;
	#500000;
end 

// stepper_enable
initial
begin
	stepper_enable = 1'b1;
end 

// start_driving
initial
begin
	start_driving = 1'b1;
end 
// stepper_speed_1[ 31 ]
initial
begin
	stepper_speed_1[31] = 1'b0;
end 
// stepper_speed_1[ 30 ]
initial
begin
	stepper_speed_1[30] = 1'b0;
end 
// stepper_speed_1[ 29 ]
initial
begin
	stepper_speed_1[29] = 1'b0;
end 
// stepper_speed_1[ 28 ]
initial
begin
	stepper_speed_1[28] = 1'b0;
end 
// stepper_speed_1[ 27 ]
initial
begin
	stepper_speed_1[27] = 1'b0;
end 
// stepper_speed_1[ 26 ]
initial
begin
	stepper_speed_1[26] = 1'b0;
end 
// stepper_speed_1[ 25 ]
initial
begin
	stepper_speed_1[25] = 1'b0;
end 
// stepper_speed_1[ 24 ]
initial
begin
	stepper_speed_1[24] = 1'b0;
end 
// stepper_speed_1[ 23 ]
initial
begin
	stepper_speed_1[23] = 1'b0;
end 
// stepper_speed_1[ 22 ]
initial
begin
	stepper_speed_1[22] = 1'b0;
end 
// stepper_speed_1[ 21 ]
initial
begin
	stepper_speed_1[21] = 1'b0;
end 
// stepper_speed_1[ 20 ]
initial
begin
	stepper_speed_1[20] = 1'b0;
end 
// stepper_speed_1[ 19 ]
initial
begin
	stepper_speed_1[19] = 1'b0;
end 
// stepper_speed_1[ 18 ]
initial
begin
	stepper_speed_1[18] = 1'b0;
end 
// stepper_speed_1[ 17 ]
initial
begin
	stepper_speed_1[17] = 1'b0;
end 
// stepper_speed_1[ 16 ]
initial
begin
	stepper_speed_1[16] = 1'b0;
end 
// stepper_speed_1[ 15 ]
initial
begin
	stepper_speed_1[15] = 1'b0;
end 
// stepper_speed_1[ 14 ]
initial
begin
	stepper_speed_1[14] = 1'b0;
end 
// stepper_speed_1[ 13 ]
initial
begin
	stepper_speed_1[13] = 1'b0;
end 
// stepper_speed_1[ 12 ]
initial
begin
	stepper_speed_1[12] = 1'b0;
end 
// stepper_speed_1[ 11 ]
initial
begin
	stepper_speed_1[11] = 1'b0;
end 
// stepper_speed_1[ 10 ]
initial
begin
	stepper_speed_1[10] = 1'b0;
end 
// stepper_speed_1[ 9 ]
initial
begin
	stepper_speed_1[9] = 1'b0;
end 
// stepper_speed_1[ 8 ]
initial
begin
	stepper_speed_1[8] = 1'b0;
end 
// stepper_speed_1[ 7 ]
initial
begin
	stepper_speed_1[7] = 1'b0;
end 
// stepper_speed_1[ 6 ]
initial
begin
	stepper_speed_1[6] = 1'b0;
end 
// stepper_speed_1[ 5 ]
initial
begin
	stepper_speed_1[5] = 1'b0;
end 
// stepper_speed_1[ 4 ]
initial
begin
	stepper_speed_1[4] = 1'b0;
end 
// stepper_speed_1[ 3 ]
initial
begin
	stepper_speed_1[3] = 1'b0;
end 
// stepper_speed_1[ 2 ]
initial
begin
	stepper_speed_1[2] = 1'b0;
end 
// stepper_speed_1[ 1 ]
initial
begin
	stepper_speed_1[1] = 1'b1;
end 
// stepper_speed_1[ 0 ]
initial
begin
	stepper_speed_1[0] = 1'b1;
end 
// stepper_speed_2[ 31 ]
initial
begin
	stepper_speed_2[31] = 1'b0;
end 
// stepper_speed_2[ 30 ]
initial
begin
	stepper_speed_2[30] = 1'b0;
end 
// stepper_speed_2[ 29 ]
initial
begin
	stepper_speed_2[29] = 1'b0;
end 
// stepper_speed_2[ 28 ]
initial
begin
	stepper_speed_2[28] = 1'b0;
end 
// stepper_speed_2[ 27 ]
initial
begin
	stepper_speed_2[27] = 1'b0;
end 
// stepper_speed_2[ 26 ]
initial
begin
	stepper_speed_2[26] = 1'b0;
end 
// stepper_speed_2[ 25 ]
initial
begin
	stepper_speed_2[25] = 1'b0;
end 
// stepper_speed_2[ 24 ]
initial
begin
	stepper_speed_2[24] = 1'b0;
end 
// stepper_speed_2[ 23 ]
initial
begin
	stepper_speed_2[23] = 1'b0;
end 
// stepper_speed_2[ 22 ]
initial
begin
	stepper_speed_2[22] = 1'b0;
end 
// stepper_speed_2[ 21 ]
initial
begin
	stepper_speed_2[21] = 1'b0;
end 
// stepper_speed_2[ 20 ]
initial
begin
	stepper_speed_2[20] = 1'b0;
end 
// stepper_speed_2[ 19 ]
initial
begin
	stepper_speed_2[19] = 1'b0;
end 
// stepper_speed_2[ 18 ]
initial
begin
	stepper_speed_2[18] = 1'b0;
end 
// stepper_speed_2[ 17 ]
initial
begin
	stepper_speed_2[17] = 1'b0;
end 
// stepper_speed_2[ 16 ]
initial
begin
	stepper_speed_2[16] = 1'b0;
end 
// stepper_speed_2[ 15 ]
initial
begin
	stepper_speed_2[15] = 1'b0;
end 
// stepper_speed_2[ 14 ]
initial
begin
	stepper_speed_2[14] = 1'b0;
end 
// stepper_speed_2[ 13 ]
initial
begin
	stepper_speed_2[13] = 1'b0;
end 
// stepper_speed_2[ 12 ]
initial
begin
	stepper_speed_2[12] = 1'b0;
end 
// stepper_speed_2[ 11 ]
initial
begin
	stepper_speed_2[11] = 1'b0;
end 
// stepper_speed_2[ 10 ]
initial
begin
	stepper_speed_2[10] = 1'b0;
end 
// stepper_speed_2[ 9 ]
initial
begin
	stepper_speed_2[9] = 1'b0;
end 
// stepper_speed_2[ 8 ]
initial
begin
	stepper_speed_2[8] = 1'b0;
end 
// stepper_speed_2[ 7 ]
initial
begin
	stepper_speed_2[7] = 1'b0;
end 
// stepper_speed_2[ 6 ]
initial
begin
	stepper_speed_2[6] = 1'b0;
end 
// stepper_speed_2[ 5 ]
initial
begin
	stepper_speed_2[5] = 1'b0;
end 
// stepper_speed_2[ 4 ]
initial
begin
	stepper_speed_2[4] = 1'b0;
end 
// stepper_speed_2[ 3 ]
initial
begin
	stepper_speed_2[3] = 1'b0;
end 
// stepper_speed_2[ 2 ]
initial
begin
	stepper_speed_2[2] = 1'b0;
end 
// stepper_speed_2[ 1 ]
initial
begin
	stepper_speed_2[1] = 1'b1;
end 
// stepper_speed_2[ 0 ]
initial
begin
	stepper_speed_2[0] = 1'b0;
end 
// stepper_step_in_1[ 31 ]
initial
begin
	stepper_step_in_1[31] = 1'b1;
end 
// stepper_step_in_1[ 30 ]
initial
begin
	stepper_step_in_1[30] = 1'b1;
end 
// stepper_step_in_1[ 29 ]
initial
begin
	stepper_step_in_1[29] = 1'b1;
end 
// stepper_step_in_1[ 28 ]
initial
begin
	stepper_step_in_1[28] = 1'b1;
end 
// stepper_step_in_1[ 27 ]
initial
begin
	stepper_step_in_1[27] = 1'b1;
end 
// stepper_step_in_1[ 26 ]
initial
begin
	stepper_step_in_1[26] = 1'b1;
end 
// stepper_step_in_1[ 25 ]
initial
begin
	stepper_step_in_1[25] = 1'b1;
end 
// stepper_step_in_1[ 24 ]
initial
begin
	stepper_step_in_1[24] = 1'b1;
end 
// stepper_step_in_1[ 23 ]
initial
begin
	stepper_step_in_1[23] = 1'b1;
end 
// stepper_step_in_1[ 22 ]
initial
begin
	stepper_step_in_1[22] = 1'b1;
end 
// stepper_step_in_1[ 21 ]
initial
begin
	stepper_step_in_1[21] = 1'b1;
end 
// stepper_step_in_1[ 20 ]
initial
begin
	stepper_step_in_1[20] = 1'b1;
end 
// stepper_step_in_1[ 19 ]
initial
begin
	stepper_step_in_1[19] = 1'b1;
end 
// stepper_step_in_1[ 18 ]
initial
begin
	stepper_step_in_1[18] = 1'b1;
end 
// stepper_step_in_1[ 17 ]
initial
begin
	stepper_step_in_1[17] = 1'b1;
end 
// stepper_step_in_1[ 16 ]
initial
begin
	stepper_step_in_1[16] = 1'b1;
end 
// stepper_step_in_1[ 15 ]
initial
begin
	stepper_step_in_1[15] = 1'b1;
end 
// stepper_step_in_1[ 14 ]
initial
begin
	stepper_step_in_1[14] = 1'b1;
end 
// stepper_step_in_1[ 13 ]
initial
begin
	stepper_step_in_1[13] = 1'b1;
end 
// stepper_step_in_1[ 12 ]
initial
begin
	stepper_step_in_1[12] = 1'b1;
end 
// stepper_step_in_1[ 11 ]
initial
begin
	stepper_step_in_1[11] = 1'b1;
end 
// stepper_step_in_1[ 10 ]
initial
begin
	stepper_step_in_1[10] = 1'b1;
end 
// stepper_step_in_1[ 9 ]
initial
begin
	stepper_step_in_1[9] = 1'b1;
end 
// stepper_step_in_1[ 8 ]
initial
begin
	stepper_step_in_1[8] = 1'b1;
end 
// stepper_step_in_1[ 7 ]
initial
begin
	stepper_step_in_1[7] = 1'b1;
end 
// stepper_step_in_1[ 6 ]
initial
begin
	stepper_step_in_1[6] = 1'b1;
end 
// stepper_step_in_1[ 5 ]
initial
begin
	stepper_step_in_1[5] = 1'b1;
end 
// stepper_step_in_1[ 4 ]
initial
begin
	stepper_step_in_1[4] = 1'b1;
end 
// stepper_step_in_1[ 3 ]
initial
begin
	stepper_step_in_1[3] = 1'b0;
end 
// stepper_step_in_1[ 2 ]
initial
begin
	stepper_step_in_1[2] = 1'b1;
end 
// stepper_step_in_1[ 1 ]
initial
begin
	stepper_step_in_1[1] = 1'b1;
end 
// stepper_step_in_1[ 0 ]
initial
begin
	stepper_step_in_1[0] = 1'b0;
end 
// stepper_step_in_2[ 31 ]
initial
begin
	stepper_step_in_2[31] = 1'b0;
end 
// stepper_step_in_2[ 30 ]
initial
begin
	stepper_step_in_2[30] = 1'b0;
end 
// stepper_step_in_2[ 29 ]
initial
begin
	stepper_step_in_2[29] = 1'b0;
end 
// stepper_step_in_2[ 28 ]
initial
begin
	stepper_step_in_2[28] = 1'b0;
end 
// stepper_step_in_2[ 27 ]
initial
begin
	stepper_step_in_2[27] = 1'b0;
end 
// stepper_step_in_2[ 26 ]
initial
begin
	stepper_step_in_2[26] = 1'b0;
end 
// stepper_step_in_2[ 25 ]
initial
begin
	stepper_step_in_2[25] = 1'b0;
end 
// stepper_step_in_2[ 24 ]
initial
begin
	stepper_step_in_2[24] = 1'b0;
end 
// stepper_step_in_2[ 23 ]
initial
begin
	stepper_step_in_2[23] = 1'b0;
end 
// stepper_step_in_2[ 22 ]
initial
begin
	stepper_step_in_2[22] = 1'b0;
end 
// stepper_step_in_2[ 21 ]
initial
begin
	stepper_step_in_2[21] = 1'b0;
end 
// stepper_step_in_2[ 20 ]
initial
begin
	stepper_step_in_2[20] = 1'b0;
end 
// stepper_step_in_2[ 19 ]
initial
begin
	stepper_step_in_2[19] = 1'b0;
end 
// stepper_step_in_2[ 18 ]
initial
begin
	stepper_step_in_2[18] = 1'b0;
end 
// stepper_step_in_2[ 17 ]
initial
begin
	stepper_step_in_2[17] = 1'b0;
end 
// stepper_step_in_2[ 16 ]
initial
begin
	stepper_step_in_2[16] = 1'b0;
end 
// stepper_step_in_2[ 15 ]
initial
begin
	stepper_step_in_2[15] = 1'b0;
end 
// stepper_step_in_2[ 14 ]
initial
begin
	stepper_step_in_2[14] = 1'b0;
end 
// stepper_step_in_2[ 13 ]
initial
begin
	stepper_step_in_2[13] = 1'b0;
end 
// stepper_step_in_2[ 12 ]
initial
begin
	stepper_step_in_2[12] = 1'b0;
end 
// stepper_step_in_2[ 11 ]
initial
begin
	stepper_step_in_2[11] = 1'b0;
end 
// stepper_step_in_2[ 10 ]
initial
begin
	stepper_step_in_2[10] = 1'b0;
end 
// stepper_step_in_2[ 9 ]
initial
begin
	stepper_step_in_2[9] = 1'b0;
end 
// stepper_step_in_2[ 8 ]
initial
begin
	stepper_step_in_2[8] = 1'b0;
end 
// stepper_step_in_2[ 7 ]
initial
begin
	stepper_step_in_2[7] = 1'b0;
end 
// stepper_step_in_2[ 6 ]
initial
begin
	stepper_step_in_2[6] = 1'b0;
end 
// stepper_step_in_2[ 5 ]
initial
begin
	stepper_step_in_2[5] = 1'b0;
end 
// stepper_step_in_2[ 4 ]
initial
begin
	stepper_step_in_2[4] = 1'b0;
end 
// stepper_step_in_2[ 3 ]
initial
begin
	stepper_step_in_2[3] = 1'b1;
end 
// stepper_step_in_2[ 2 ]
initial
begin
	stepper_step_in_2[2] = 1'b1;
end 
// stepper_step_in_2[ 1 ]
initial
begin
	stepper_step_in_2[1] = 1'b1;
end 
// stepper_step_in_2[ 0 ]
initial
begin
	stepper_step_in_2[0] = 1'b1;
end 

// xmin
initial
begin
	xmin = 1'b0;
end 

// xmax
initial
begin
	xmax = 1'b0;
	xmax = #35000000 1'b1;
	xmax = #35000000 1'b0;
end 

// ymin
initial
begin
	ymin = 1'b0;
end 

// ymax
initial
begin
	ymax = 1'b0;
end 
endmodule

