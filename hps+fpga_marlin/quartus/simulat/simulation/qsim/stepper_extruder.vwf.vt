// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/27/2019 21:06:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          stepper_extruder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module stepper_extruder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg start_driving;
reg stepper_enable;
reg [31:0] stepper_speed;
reg [31:0] stepper_step_in;
// wires                                               
wire dir;
wire enable;
wire step_signal;
wire stepper_driving;
wire [31:0] stepper_step_out;

// assign statements (if any)                          
stepper_extruder i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dir(dir),
	.enable(enable),
	.start_driving(start_driving),
	.step_signal(step_signal),
	.stepper_driving(stepper_driving),
	.stepper_enable(stepper_enable),
	.stepper_speed(stepper_speed),
	.stepper_step_in(stepper_step_in),
	.stepper_step_out(stepper_step_out)
);
initial 
begin 
#1000000 $finish;
end 

// start_driving
initial
begin
	start_driving = 1'b1;
	start_driving = #300000 1'b0;
	start_driving = #300000 1'b1;
	start_driving = #300000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// stepper_enable
initial
begin
	stepper_enable = 1'b1;
end 
// stepper_speed[ 31 ]
initial
begin
	stepper_speed[31] = 1'b0;
end 
// stepper_speed[ 30 ]
initial
begin
	stepper_speed[30] = 1'b0;
end 
// stepper_speed[ 29 ]
initial
begin
	stepper_speed[29] = 1'b0;
end 
// stepper_speed[ 28 ]
initial
begin
	stepper_speed[28] = 1'b0;
end 
// stepper_speed[ 27 ]
initial
begin
	stepper_speed[27] = 1'b0;
end 
// stepper_speed[ 26 ]
initial
begin
	stepper_speed[26] = 1'b0;
end 
// stepper_speed[ 25 ]
initial
begin
	stepper_speed[25] = 1'b0;
end 
// stepper_speed[ 24 ]
initial
begin
	stepper_speed[24] = 1'b0;
end 
// stepper_speed[ 23 ]
initial
begin
	stepper_speed[23] = 1'b0;
end 
// stepper_speed[ 22 ]
initial
begin
	stepper_speed[22] = 1'b0;
end 
// stepper_speed[ 21 ]
initial
begin
	stepper_speed[21] = 1'b0;
end 
// stepper_speed[ 20 ]
initial
begin
	stepper_speed[20] = 1'b0;
end 
// stepper_speed[ 19 ]
initial
begin
	stepper_speed[19] = 1'b0;
end 
// stepper_speed[ 18 ]
initial
begin
	stepper_speed[18] = 1'b0;
end 
// stepper_speed[ 17 ]
initial
begin
	stepper_speed[17] = 1'b0;
end 
// stepper_speed[ 16 ]
initial
begin
	stepper_speed[16] = 1'b0;
end 
// stepper_speed[ 15 ]
initial
begin
	stepper_speed[15] = 1'b0;
end 
// stepper_speed[ 14 ]
initial
begin
	stepper_speed[14] = 1'b0;
end 
// stepper_speed[ 13 ]
initial
begin
	stepper_speed[13] = 1'b0;
end 
// stepper_speed[ 12 ]
initial
begin
	stepper_speed[12] = 1'b0;
end 
// stepper_speed[ 11 ]
initial
begin
	stepper_speed[11] = 1'b0;
end 
// stepper_speed[ 10 ]
initial
begin
	stepper_speed[10] = 1'b0;
end 
// stepper_speed[ 9 ]
initial
begin
	stepper_speed[9] = 1'b0;
end 
// stepper_speed[ 8 ]
initial
begin
	stepper_speed[8] = 1'b0;
end 
// stepper_speed[ 7 ]
initial
begin
	stepper_speed[7] = 1'b0;
end 
// stepper_speed[ 6 ]
initial
begin
	stepper_speed[6] = 1'b0;
end 
// stepper_speed[ 5 ]
initial
begin
	stepper_speed[5] = 1'b0;
end 
// stepper_speed[ 4 ]
initial
begin
	stepper_speed[4] = 1'b0;
end 
// stepper_speed[ 3 ]
initial
begin
	stepper_speed[3] = 1'b0;
end 
// stepper_speed[ 2 ]
initial
begin
	stepper_speed[2] = 1'b0;
end 
// stepper_speed[ 1 ]
initial
begin
	stepper_speed[1] = 1'b1;
end 
// stepper_speed[ 0 ]
initial
begin
	stepper_speed[0] = 1'b0;
end 
// stepper_step_in[ 31 ]
initial
begin
	stepper_step_in[31] = 1'b1;
	stepper_step_in[31] = #99000 1'b0;
end 
// stepper_step_in[ 30 ]
initial
begin
	stepper_step_in[30] = 1'b1;
	stepper_step_in[30] = #99000 1'b0;
end 
// stepper_step_in[ 29 ]
initial
begin
	stepper_step_in[29] = 1'b1;
	stepper_step_in[29] = #99000 1'b0;
end 
// stepper_step_in[ 28 ]
initial
begin
	stepper_step_in[28] = 1'b1;
	stepper_step_in[28] = #99000 1'b0;
end 
// stepper_step_in[ 27 ]
initial
begin
	stepper_step_in[27] = 1'b1;
	stepper_step_in[27] = #99000 1'b0;
end 
// stepper_step_in[ 26 ]
initial
begin
	stepper_step_in[26] = 1'b1;
	stepper_step_in[26] = #99000 1'b0;
end 
// stepper_step_in[ 25 ]
initial
begin
	stepper_step_in[25] = 1'b1;
	stepper_step_in[25] = #99000 1'b0;
end 
// stepper_step_in[ 24 ]
initial
begin
	stepper_step_in[24] = 1'b1;
	stepper_step_in[24] = #99000 1'b0;
end 
// stepper_step_in[ 23 ]
initial
begin
	stepper_step_in[23] = 1'b1;
	stepper_step_in[23] = #99000 1'b0;
end 
// stepper_step_in[ 22 ]
initial
begin
	stepper_step_in[22] = 1'b1;
	stepper_step_in[22] = #99000 1'b0;
end 
// stepper_step_in[ 21 ]
initial
begin
	stepper_step_in[21] = 1'b1;
	stepper_step_in[21] = #99000 1'b0;
end 
// stepper_step_in[ 20 ]
initial
begin
	stepper_step_in[20] = 1'b1;
	stepper_step_in[20] = #99000 1'b0;
end 
// stepper_step_in[ 19 ]
initial
begin
	stepper_step_in[19] = 1'b1;
	stepper_step_in[19] = #99000 1'b0;
end 
// stepper_step_in[ 18 ]
initial
begin
	stepper_step_in[18] = 1'b1;
	stepper_step_in[18] = #99000 1'b0;
end 
// stepper_step_in[ 17 ]
initial
begin
	stepper_step_in[17] = 1'b1;
	stepper_step_in[17] = #99000 1'b0;
end 
// stepper_step_in[ 16 ]
initial
begin
	stepper_step_in[16] = 1'b1;
	stepper_step_in[16] = #99000 1'b0;
end 
// stepper_step_in[ 15 ]
initial
begin
	stepper_step_in[15] = 1'b1;
	stepper_step_in[15] = #99000 1'b0;
end 
// stepper_step_in[ 14 ]
initial
begin
	stepper_step_in[14] = 1'b1;
	stepper_step_in[14] = #99000 1'b0;
end 
// stepper_step_in[ 13 ]
initial
begin
	stepper_step_in[13] = 1'b1;
	stepper_step_in[13] = #99000 1'b0;
end 
// stepper_step_in[ 12 ]
initial
begin
	stepper_step_in[12] = 1'b1;
	stepper_step_in[12] = #99000 1'b0;
end 
// stepper_step_in[ 11 ]
initial
begin
	stepper_step_in[11] = 1'b1;
	stepper_step_in[11] = #99000 1'b0;
end 
// stepper_step_in[ 10 ]
initial
begin
	stepper_step_in[10] = 1'b1;
	stepper_step_in[10] = #99000 1'b0;
end 
// stepper_step_in[ 9 ]
initial
begin
	stepper_step_in[9] = 1'b1;
	stepper_step_in[9] = #99000 1'b0;
end 
// stepper_step_in[ 8 ]
initial
begin
	stepper_step_in[8] = 1'b1;
	stepper_step_in[8] = #99000 1'b0;
end 
// stepper_step_in[ 7 ]
initial
begin
	stepper_step_in[7] = 1'b1;
	stepper_step_in[7] = #99000 1'b0;
end 
// stepper_step_in[ 6 ]
initial
begin
	stepper_step_in[6] = 1'b1;
	stepper_step_in[6] = #99000 1'b0;
end 
// stepper_step_in[ 5 ]
initial
begin
	stepper_step_in[5] = 1'b1;
	stepper_step_in[5] = #99000 1'b0;
end 
// stepper_step_in[ 4 ]
initial
begin
	stepper_step_in[4] = 1'b1;
	stepper_step_in[4] = #99000 1'b0;
end 
// stepper_step_in[ 3 ]
initial
begin
	stepper_step_in[3] = 1'b1;
	stepper_step_in[3] = #99000 1'b0;
end 
// stepper_step_in[ 2 ]
initial
begin
	stepper_step_in[2] = 1'b1;
end 
// stepper_step_in[ 1 ]
initial
begin
	stepper_step_in[1] = 1'b0;
end 
// stepper_step_in[ 0 ]
initial
begin
	stepper_step_in[0] = 1'b1;
end 
endmodule

