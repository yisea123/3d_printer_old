// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/26/2019 17:33:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          heater_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module heater_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] control;
reg [11:0] temp;
reg [11:0] temp_bottom;
reg [11:0] temp_upper;
// wires                                               
wire enable_heater;

// assign statements (if any)                          
heater_control i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.control(control),
	.enable_heater(enable_heater),
	.temp(temp),
	.temp_bottom(temp_bottom),
	.temp_upper(temp_upper)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// control[ 1 ]
initial
begin
	control[1] = 1'b0;
end 
// control[ 0 ]
initial
begin
	control[0] = 1'b0;
end 
// temp[ 11 ]
initial
begin
	temp[11] = 1'b0;
end 
// temp[ 10 ]
initial
begin
	temp[10] = 1'b0;
end 
// temp[ 9 ]
initial
begin
	temp[9] = 1'b0;
end 
// temp[ 8 ]
initial
begin
	temp[8] = 1'b0;
end 
// temp[ 7 ]
initial
begin
	temp[7] = 1'b0;
end 
// temp[ 6 ]
initial
begin
	temp[6] = 1'b0;
end 
// temp[ 5 ]
initial
begin
	temp[5] = 1'b1;
	temp[5] = #80000 1'b0;
	temp[5] = #400000 1'b1;
	temp[5] = #160000 1'b0;
	temp[5] = #240000 1'b1;
end 
// temp[ 4 ]
initial
begin
	temp[4] = 1'b0;
	temp[4] = #80000 1'b1;
	temp[4] = #80000 1'b0;
	temp[4] = #240000 1'b1;
	temp[4] = #80000 1'b0;
	temp[4] = #160000 1'b1;
	temp[4] = #80000 1'b0;
end 
// temp[ 3 ]
initial
begin
	temp[3] = 1'b1;
	temp[3] = #80000 1'b0;
	temp[3] = #80000 1'b1;
	temp[3] = #320000 1'b0;
	temp[3] = #80000 1'b1;
	temp[3] = #160000 1'b0;
	temp[3] = #80000 1'b1;
	temp[3] = #80000 1'b0;
end 
// temp[ 2 ]
initial
begin
	temp[2] = 1'b0;
	temp[2] = #80000 1'b1;
	temp[2] = #80000 1'b0;
	temp[2] = #80000 1'b1;
	temp[2] = #160000 1'b0;
	temp[2] = #320000 1'b1;
	temp[2] = #160000 1'b0;
	temp[2] = #80000 1'b1;
end 
// temp[ 1 ]
initial
begin
	temp[1] = 1'b0;
	temp[1] = #400000 1'b1;
	temp[1] = #80000 1'b0;
	temp[1] = #160000 1'b1;
	temp[1] = #240000 1'b0;
end 
// temp[ 0 ]
initial
begin
	temp[0] = 1'b0;
	temp[0] = #400000 1'b1;
	temp[0] = #160000 1'b0;
	temp[0] = #160000 1'b1;
	temp[0] = #240000 1'b0;
end 
// temp_bottom[ 11 ]
initial
begin
	temp_bottom[11] = 1'b0;
end 
// temp_bottom[ 10 ]
initial
begin
	temp_bottom[10] = 1'b0;
end 
// temp_bottom[ 9 ]
initial
begin
	temp_bottom[9] = 1'b0;
end 
// temp_bottom[ 8 ]
initial
begin
	temp_bottom[8] = 1'b0;
end 
// temp_bottom[ 7 ]
initial
begin
	temp_bottom[7] = 1'b0;
end 
// temp_bottom[ 6 ]
initial
begin
	temp_bottom[6] = 1'b0;
end 
// temp_bottom[ 5 ]
initial
begin
	temp_bottom[5] = 1'b0;
end 
// temp_bottom[ 4 ]
initial
begin
	temp_bottom[4] = 1'b1;
end 
// temp_bottom[ 3 ]
initial
begin
	temp_bottom[3] = 1'b1;
end 
// temp_bottom[ 2 ]
initial
begin
	temp_bottom[2] = 1'b1;
end 
// temp_bottom[ 1 ]
initial
begin
	temp_bottom[1] = 1'b1;
end 
// temp_bottom[ 0 ]
initial
begin
	temp_bottom[0] = 1'b0;
end 
// temp_upper[ 11 ]
initial
begin
	temp_upper[11] = 1'b0;
end 
// temp_upper[ 10 ]
initial
begin
	temp_upper[10] = 1'b0;
end 
// temp_upper[ 9 ]
initial
begin
	temp_upper[9] = 1'b0;
end 
// temp_upper[ 8 ]
initial
begin
	temp_upper[8] = 1'b0;
end 
// temp_upper[ 7 ]
initial
begin
	temp_upper[7] = 1'b0;
end 
// temp_upper[ 6 ]
initial
begin
	temp_upper[6] = 1'b0;
end 
// temp_upper[ 5 ]
initial
begin
	temp_upper[5] = 1'b0;
end 
// temp_upper[ 4 ]
initial
begin
	temp_upper[4] = 1'b0;
end 
// temp_upper[ 3 ]
initial
begin
	temp_upper[3] = 1'b1;
end 
// temp_upper[ 2 ]
initial
begin
	temp_upper[2] = 1'b0;
end 
// temp_upper[ 1 ]
initial
begin
	temp_upper[1] = 1'b1;
end 
// temp_upper[ 0 ]
initial
begin
	temp_upper[0] = 1'b0;
end 
endmodule

